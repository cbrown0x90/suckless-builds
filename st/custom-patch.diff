diff -Naur ../pkg/st-0.6/config.def.h ./config.def.h
--- ../pkg/st-0.6/config.def.h	2015-07-07 16:26:44.000000000 -0400
+++ ./config.def.h	2015-10-30 10:13:47.494538050 -0400
@@ -5,11 +5,21 @@
  *
  * font: see http://freedesktop.org/software/fontconfig/fontconfig-user.html
  */
-static char font[] = "Liberation Mono:pixelsize=12:antialias=false:autohint=false";
+static char font[] = "Liberation Mono:pixelsize=12:antialias=true:autohint=true";
 static int borderpx = 2;
+static int histsize = 2000;
+
+/*
+ * What program is execed by st depends of these precedence rules:
+ * 1: program passed with -e
+ * 2: utmp option
+ * 3: SHELL environment variable
+ * 4: value of shell in /etc/passwd
+ * 5: value of shell in config.h
+ */
 static char shell[] = "/bin/sh";
 static char *utmp = NULL;
-static char stty_args[] = "stty raw -echo -iexten echonl";
+static char stty_args[] = "stty raw pass8 nl -echo -iexten -cstopb 38400";
 
 /* identification sequence returned in DA and DECID */
 static char vtiden[] = "\033[?6c";
@@ -30,7 +40,7 @@
 static unsigned int tripleclicktimeout = 600;
 
 /* alt screens */
-static bool allowaltscreen = true;
+static int allowaltscreen = 1;
 
 /* frames per second st should at maximum draw to the screen */
 static unsigned int xfps = 120;
@@ -53,12 +63,11 @@
  */
 static int bellvolume = 0;
 
-/* TERM value */
+/* default TERM value */
 static char termname[] = "st-256color";
 
 static unsigned int tabspaces = 8;
 
-
 /* Terminal colors (16 first used in escape sequence) */
 static const char *colorname[] = {
 	/* 8 normal colors */
@@ -85,18 +94,39 @@
 
 	/* more colors can be added after 255 to use with DefaultXX */
 	"#cccccc",
+	"#555555",
 };
 
+/* bg opacity */
+static const int alpha = 0xdd;
 
 /*
  * Default colors (colorname index)
- * foreground, background, cursor
+ * foreground, background, cursor, reverse cursor
  */
 static unsigned int defaultfg = 7;
 static unsigned int defaultbg = 0;
 static unsigned int defaultcs = 256;
+static unsigned int defaultrcs = 257;
+
+/*
+ * Default shape of cursor
+ * 2: Block ("█")
+ * 4: Underline ("_")
+ * 6: Bar ("|")
+ * 7: Snowman ("☃")
+ */
+static unsigned int cursorshape = 2;
+
+/*
+ * Default colour and shape of the mouse cursor
+ */
+static unsigned int mouseshape = XC_xterm;
+static unsigned int mousefg = 7;
+static unsigned int mousebg = 0;
 
 /*
+	"black",
  * Colors used, when the specific fg == defaultfg. So in reverse mode this
  * will reverse too. Another logic would only make the simple feature too
  * complex.
@@ -104,12 +134,20 @@
 static unsigned int defaultitalic = 11;
 static unsigned int defaultunderline = 7;
 
-/* Internal mouse shortcuts. */
-/* Beware that overloading Button1 will disable the selection. */
-static Mousekey mshortcuts[] = {
+/*
+ * Internal mouse shortcuts.
+ * Beware that overloading Button1 will disable the selection.
+ */
+static Mousekey mkeys[] = {
 	/* button               mask            string */
-	{ Button4,              XK_ANY_MOD,     "\031" },
-	{ Button5,              XK_ANY_MOD,     "\005" },
+	{ Button4,              XK_NO_MOD,      "\031" },
+	{ Button5,              XK_NO_MOD,      "\005" },
+};
+
+static MouseShortcut mshortcuts[] = {
+	/* button               mask            function        argument */
+	{ Button4,              ShiftMask,      kscrollup,      { .i = 1 } },
+	{ Button5,              ShiftMask,      kscrolldown,    { .i = 1 } },
 };
 
 /* Internal keyboard shortcuts. */
@@ -117,6 +155,7 @@
 
 static Shortcut shortcuts[] = {
 	/* mask                 keysym          function        argument */
+	{ XK_ANY_MOD,           XK_Break,       sendbreak,      {.i =  0} },
 	{ ControlMask,          XK_Print,       toggleprinter,  {.i =  0} },
 	{ ShiftMask,            XK_Print,       printscreen,    {.i =  0} },
 	{ XK_ANY_MOD,           XK_Print,       printsel,       {.i =  0} },
@@ -128,6 +167,8 @@
 	{ MODKEY|ShiftMask,     XK_C,           clipcopy,       {.i =  0} },
 	{ MODKEY|ShiftMask,     XK_V,           clippaste,      {.i =  0} },
 	{ MODKEY,               XK_Num_Lock,    numlock,        {.i =  0} },
+	{ ShiftMask,            XK_Page_Up,     kscrollup,      {.i = -1} },
+	{ ShiftMask,            XK_Page_Down,   kscrolldown,    {.i = -1} },
 };
 
 /*
@@ -167,11 +208,17 @@
  */
 static uint ignoremod = Mod2Mask|XK_SWITCH_MOD;
 
-/* Override mouse-select while mask is active (when MODE_MOUSE is set).
+/*
+ * Override mouse-select while mask is active (when MODE_MOUSE is set).
  * Note that if you want to use ShiftMask with selmasks, set this to an other
- * modifier, set to 0 to not use it. */
+ * modifier, set to 0 to not use it.
+ */
 static uint forceselmod = ShiftMask;
 
+/*
+ * This is the huge key array which defines all compatibility to the Linux
+ * world. Please decide about changes wisely.
+ */
 static Key key[] = {
 	/* keysym           mask            string      appkey appcursor crlf */
 	{ XK_KP_Home,       ShiftMask,      "\033[2J",       0,   -1,    0},
diff -Naur ../pkg/st-0.6/config.h ./config.h
--- ../pkg/st-0.6/config.h	1969-12-31 19:00:00.000000000 -0500
+++ ./config.h	2015-10-30 10:13:47.494538050 -0400
@@ -0,0 +1,431 @@
+/* See LICENSE file for copyright and license details. */
+
+/*
+ * appearance
+ *
+ * font: see http://freedesktop.org/software/fontconfig/fontconfig-user.html
+ */
+static char font[] = "Source Code Pro:pixelsize=14:antialias=true:autohint=false";
+static int borderpx = 2;
+static int histsize = 2000;
+
+/*
+ * What program is execed by st depends of these precedence rules:
+ * 1: program passed with -e
+ * 2: utmp option
+ * 3: SHELL environment variable
+ * 4: value of shell in /etc/passwd
+ * 5: value of shell in config.h
+ */
+static char shell[] = "/bin/zsh";
+static char *utmp = NULL;
+static char stty_args[] = "stty raw pass8 nl -echo -iexten -cstopb 38400";
+
+/* identification sequence returned in DA and DECID */
+static char vtiden[] = "\033[?6c";
+
+/* Kerning / character bounding-box multipliers */
+static float cwscale = 1.0;
+static float chscale = 1.0;
+
+/*
+ * word delimiter string
+ *
+ * More advanced example: " `'\"()[]{}"
+ */
+static char worddelimiters[] = " ";
+
+/* selection timeouts (in milliseconds) */
+static unsigned int doubleclicktimeout = 300;
+static unsigned int tripleclicktimeout = 600;
+
+/* alt screens */
+static int allowaltscreen = 1;
+
+/* frames per second st should at maximum draw to the screen */
+static unsigned int xfps = 120;
+static unsigned int actionfps = 30;
+
+/*
+ * blinking timeout (set to 0 to disable blinking) for the terminal blinking
+ * attribute.
+ */
+static unsigned int blinktimeout = 800;
+
+/*
+ * thickness of underline and bar cursors
+ */
+static unsigned int cursorthickness = 2;
+
+/*
+ * bell volume. It must be a value between -100 and 100. Use 0 for disabling
+ * it
+ */
+static int bellvolume = 0;
+
+/* default TERM value */
+static char termname[] = "st-256color";
+
+static unsigned int tabspaces = 8;
+
+/* Terminal colors (16 first used in escape sequence) */
+static const char *colorname[] = {
+        /* 8 normal colors */
+        "black",
+        "#d75f5f",
+        "#87af5f",
+        "#ffaf5f",
+        "#87afd7",
+        "#8787af",
+        "#5f8787",
+        "#D0D0D0",
+        /* 8 bright colors */
+        "#404040",
+        "#EA8484",
+        "#C7F09F",
+        "#FFCC9A",
+        "#a5caef",
+        "#A6A6DE",
+        "#69b2b2",
+        "#d7d7d7",
+        "#080808",
+        [255] = 0,
+
+        /* more colors can be added after 255 to use with DefaultXX */
+        "#cccccc",
+        "#333333",
+};
+
+/* bg opacity */
+static const int alpha = 0xCC;
+
+/*
+ * Default colors (colorname index)
+ * foreground, background, cursor, reverse cursor
+ */
+static unsigned int defaultfg = 7;
+static unsigned int defaultbg = 0;
+static unsigned int defaultcs = 256;
+static unsigned int defaultrcs = 257;
+
+/*
+ * Default shape of cursor
+ * 2: Block ("█")
+ * 4: Underline ("_")
+ * 6: Bar ("|")
+ * 7: Snowman ("☃")
+ */
+static unsigned int cursorshape = 2;
+
+/*
+ * Default colour and shape of the mouse cursor
+ */
+static unsigned int mouseshape = XC_xterm;
+static unsigned int mousefg = 7;
+static unsigned int mousebg = 0;
+
+/*
+	"black",
+ * Colors used, when the specific fg == defaultfg. So in reverse mode this
+ * will reverse too. Another logic would only make the simple feature too
+ * complex.
+ */
+static unsigned int defaultitalic = 11;
+static unsigned int defaultunderline = 7;
+
+/*
+ * Internal mouse shortcuts.
+ * Beware that overloading Button1 will disable the selection.
+ */
+static Mousekey mkeys[] = {
+	/* button               mask            string */
+	{ Button4,              XK_NO_MOD,     "\031" },
+	{ Button5,              XK_NO_MOD,     "\005" },
+};
+
+static MouseShortcut mshortcuts[] = {
+        /* button               mask            function        argument */
+        { Button4,              ShiftMask,      kscrollup,      { .i = 1 } },
+        { Button5,              ShiftMask,      kscrolldown,    { .i = 1 } },
+};
+
+
+/* Internal keyboard shortcuts. */
+#define MODKEY Mod1Mask
+
+static Shortcut shortcuts[] = {
+	/* mask                 keysym          function        argument */
+	{ XK_ANY_MOD,           XK_Break,       sendbreak,      {.i =  0} },
+	{ ControlMask,          XK_Print,       toggleprinter,  {.i =  0} },
+	{ ShiftMask,            XK_Print,       printscreen,    {.i =  0} },
+	{ XK_ANY_MOD,           XK_Print,       printsel,       {.i =  0} },
+	{ MODKEY|ShiftMask,     XK_Prior,       xzoom,          {.f = +1} },
+	{ MODKEY|ShiftMask,     XK_Next,        xzoom,          {.f = -1} },
+	{ MODKEY|ShiftMask,     XK_Home,        xzoomreset,     {.f =  0} },
+	{ ShiftMask,            XK_Insert,      selpaste,       {.i =  0} },
+	{ MODKEY|ShiftMask,     XK_Insert,      clippaste,      {.i =  0} },
+	{ MODKEY|ShiftMask,     XK_C,           clipcopy,       {.i =  0} },
+	{ MODKEY|ShiftMask,     XK_V,           clippaste,      {.i =  0} },
+	{ MODKEY,               XK_Num_Lock,    numlock,        {.i =  0} },
+        { ShiftMask,            XK_Up,     kscrollup,      {.i = -1} },
+        { ShiftMask,            XK_Down,   kscrolldown,    {.i = -1} },
+};
+
+/*
+ * Special keys (change & recompile st.info accordingly)
+ *
+ * Mask value:
+ * * Use XK_ANY_MOD to match the key no matter modifiers state
+ * * Use XK_NO_MOD to match the key alone (no modifiers)
+ * appkey value:
+ * * 0: no value
+ * * > 0: keypad application mode enabled
+ * *   = 2: term.numlock = 1
+ * * < 0: keypad application mode disabled
+ * appcursor value:
+ * * 0: no value
+ * * > 0: cursor application mode enabled
+ * * < 0: cursor application mode disabled
+ * crlf value
+ * * 0: no value
+ * * > 0: crlf mode is enabled
+ * * < 0: crlf mode is disabled
+ *
+ * Be careful with the order of the definitions because st searches in
+ * this table sequentially, so any XK_ANY_MOD must be in the last
+ * position for a key.
+ */
+
+/*
+ * If you want keys other than the X11 function keys (0xFD00 - 0xFFFF)
+ * to be mapped below, add them to this array.
+ */
+static KeySym mappedkeys[] = { -1 };
+
+/*
+ * State bits to ignore when matching key or button events.  By default,
+ * numlock (Mod2Mask) and keyboard layout (XK_SWITCH_MOD) are ignored.
+ */
+static uint ignoremod = Mod2Mask|XK_SWITCH_MOD;
+
+/*
+ * Override mouse-select while mask is active (when MODE_MOUSE is set).
+ * Note that if you want to use ShiftMask with selmasks, set this to an other
+ * modifier, set to 0 to not use it.
+ */
+static uint forceselmod = ShiftMask;
+
+/*
+ * This is the huge key array which defines all compatibility to the Linux
+ * world. Please decide about changes wisely.
+ */
+static Key key[] = {
+	/* keysym           mask            string      appkey appcursor crlf */
+	{ XK_KP_Home,       ShiftMask,      "\033[2J",       0,   -1,    0},
+	{ XK_KP_Home,       ShiftMask,      "\033[1;2H",     0,   +1,    0},
+	{ XK_KP_Home,       XK_ANY_MOD,     "\033[H",        0,   -1,    0},
+	{ XK_KP_Home,       XK_ANY_MOD,     "\033[1~",       0,   +1,    0},
+	{ XK_KP_Up,         XK_ANY_MOD,     "\033Ox",       +1,    0,    0},
+	{ XK_KP_Up,         XK_ANY_MOD,     "\033[A",        0,   -1,    0},
+	{ XK_KP_Up,         XK_ANY_MOD,     "\033OA",        0,   +1,    0},
+	{ XK_KP_Down,       XK_ANY_MOD,     "\033Or",       +1,    0,    0},
+	{ XK_KP_Down,       XK_ANY_MOD,     "\033[B",        0,   -1,    0},
+	{ XK_KP_Down,       XK_ANY_MOD,     "\033OB",        0,   +1,    0},
+	{ XK_KP_Left,       XK_ANY_MOD,     "\033Ot",       +1,    0,    0},
+	{ XK_KP_Left,       XK_ANY_MOD,     "\033[D",        0,   -1,    0},
+	{ XK_KP_Left,       XK_ANY_MOD,     "\033OD",        0,   +1,    0},
+	{ XK_KP_Right,      XK_ANY_MOD,     "\033Ov",       +1,    0,    0},
+	{ XK_KP_Right,      XK_ANY_MOD,     "\033[C",        0,   -1,    0},
+	{ XK_KP_Right,      XK_ANY_MOD,     "\033OC",        0,   +1,    0},
+	{ XK_KP_Prior,      ShiftMask,      "\033[5;2~",     0,    0,    0},
+	{ XK_KP_Prior,      XK_ANY_MOD,     "\033[5~",       0,    0,    0},
+	{ XK_KP_Begin,      XK_ANY_MOD,     "\033[E",        0,    0,    0},
+	{ XK_KP_End,        ControlMask,    "\033[J",       -1,    0,    0},
+	{ XK_KP_End,        ControlMask,    "\033[1;5F",    +1,    0,    0},
+	{ XK_KP_End,        ShiftMask,      "\033[K",       -1,    0,    0},
+	{ XK_KP_End,        ShiftMask,      "\033[1;2F",    +1,    0,    0},
+	{ XK_KP_End,        XK_ANY_MOD,     "\033[4~",       0,    0,    0},
+	{ XK_KP_Next,       ShiftMask,      "\033[6;2~",     0,    0,    0},
+	{ XK_KP_Next,       XK_ANY_MOD,     "\033[6~",       0,    0,    0},
+	{ XK_KP_Insert,     ShiftMask,      "\033[2;2~",    +1,    0,    0},
+	{ XK_KP_Insert,     ShiftMask,      "\033[4l",      -1,    0,    0},
+	{ XK_KP_Insert,     ControlMask,    "\033[L",       -1,    0,    0},
+	{ XK_KP_Insert,     ControlMask,    "\033[2;5~",    +1,    0,    0},
+	{ XK_KP_Insert,     XK_ANY_MOD,     "\033[4h",      -1,    0,    0},
+	{ XK_KP_Insert,     XK_ANY_MOD,     "\033[2~",      +1,    0,    0},
+	{ XK_KP_Delete,     ControlMask,    "\033[M",       -1,    0,    0},
+	{ XK_KP_Delete,     ControlMask,    "\033[3;5~",    +1,    0,    0},
+	{ XK_KP_Delete,     ShiftMask,      "\033[2K",      -1,    0,    0},
+	{ XK_KP_Delete,     ShiftMask,      "\033[3;2~",    +1,    0,    0},
+	{ XK_KP_Delete,     XK_ANY_MOD,     "\033[P",       -1,    0,    0},
+	{ XK_KP_Delete,     XK_ANY_MOD,     "\033[3~",      +1,    0,    0},
+	{ XK_KP_Multiply,   XK_ANY_MOD,     "\033Oj",       +2,    0,    0},
+	{ XK_KP_Add,        XK_ANY_MOD,     "\033Ok",       +2,    0,    0},
+	{ XK_KP_Enter,      XK_ANY_MOD,     "\033OM",       +2,    0,    0},
+	{ XK_KP_Enter,      XK_ANY_MOD,     "\r",           -1,    0,   -1},
+	{ XK_KP_Enter,      XK_ANY_MOD,     "\r\n",         -1,    0,   +1},
+	{ XK_KP_Subtract,   XK_ANY_MOD,     "\033Om",       +2,    0,    0},
+	{ XK_KP_Decimal,    XK_ANY_MOD,     "\033On",       +2,    0,    0},
+	{ XK_KP_Divide,     XK_ANY_MOD,     "\033Oo",       +2,    0,    0},
+	{ XK_KP_0,          XK_ANY_MOD,     "\033Op",       +2,    0,    0},
+	{ XK_KP_1,          XK_ANY_MOD,     "\033Oq",       +2,    0,    0},
+	{ XK_KP_2,          XK_ANY_MOD,     "\033Or",       +2,    0,    0},
+	{ XK_KP_3,          XK_ANY_MOD,     "\033Os",       +2,    0,    0},
+	{ XK_KP_4,          XK_ANY_MOD,     "\033Ot",       +2,    0,    0},
+	{ XK_KP_5,          XK_ANY_MOD,     "\033Ou",       +2,    0,    0},
+	{ XK_KP_6,          XK_ANY_MOD,     "\033Ov",       +2,    0,    0},
+	{ XK_KP_7,          XK_ANY_MOD,     "\033Ow",       +2,    0,    0},
+	{ XK_KP_8,          XK_ANY_MOD,     "\033Ox",       +2,    0,    0},
+	{ XK_KP_9,          XK_ANY_MOD,     "\033Oy",       +2,    0,    0},
+	{ XK_Up,            ShiftMask,      "\033[1;2A",     0,    0,    0},
+	{ XK_Up,            ControlMask,    "\033[1;5A",     0,    0,    0},
+	{ XK_Up,            Mod1Mask,       "\033[1;3A",     0,    0,    0},
+	{ XK_Up,            XK_ANY_MOD,     "\033[A",        0,   -1,    0},
+	{ XK_Up,            XK_ANY_MOD,     "\033OA",        0,   +1,    0},
+	{ XK_Down,          ShiftMask,      "\033[1;2B",     0,    0,    0},
+	{ XK_Down,          ControlMask,    "\033[1;5B",     0,    0,    0},
+	{ XK_Down,          Mod1Mask,       "\033[1;3B",     0,    0,    0},
+	{ XK_Down,          XK_ANY_MOD,     "\033[B",        0,   -1,    0},
+	{ XK_Down,          XK_ANY_MOD,     "\033OB",        0,   +1,    0},
+	{ XK_Left,          ShiftMask,      "\033[1;2D",     0,    0,    0},
+	{ XK_Left,          ControlMask,    "\033[1;5D",     0,    0,    0},
+	{ XK_Left,          Mod1Mask,       "\033[1;3D",     0,    0,    0},
+	{ XK_Left,          XK_ANY_MOD,     "\033[D",        0,   -1,    0},
+	{ XK_Left,          XK_ANY_MOD,     "\033OD",        0,   +1,    0},
+	{ XK_Right,         ShiftMask,      "\033[1;2C",     0,    0,    0},
+	{ XK_Right,         ControlMask,    "\033[1;5C",     0,    0,    0},
+	{ XK_Right,         Mod1Mask,       "\033[1;3C",     0,    0,    0},
+	{ XK_Right,         XK_ANY_MOD,     "\033[C",        0,   -1,    0},
+	{ XK_Right,         XK_ANY_MOD,     "\033OC",        0,   +1,    0},
+	{ XK_ISO_Left_Tab,  ShiftMask,      "\033[Z",        0,    0,    0},
+	{ XK_Return,        Mod1Mask,       "\033\r",        0,    0,   -1},
+	{ XK_Return,        Mod1Mask,       "\033\r\n",      0,    0,   +1},
+	{ XK_Return,        XK_ANY_MOD,     "\r",            0,    0,   -1},
+	{ XK_Return,        XK_ANY_MOD,     "\r\n",          0,    0,   +1},
+	{ XK_Insert,        ShiftMask,      "\033[4l",      -1,    0,    0},
+	{ XK_Insert,        ShiftMask,      "\033[2;2~",    +1,    0,    0},
+	{ XK_Insert,        ControlMask,    "\033[L",       -1,    0,    0},
+	{ XK_Insert,        ControlMask,    "\033[2;5~",    +1,    0,    0},
+	{ XK_Insert,        XK_ANY_MOD,     "\033[4h",      -1,    0,    0},
+	{ XK_Insert,        XK_ANY_MOD,     "\033[2~",      +1,    0,    0},
+	{ XK_Delete,        ControlMask,    "\033[M",       -1,    0,    0},
+	{ XK_Delete,        ControlMask,    "\033[3;5~",    +1,    0,    0},
+	{ XK_Delete,        ShiftMask,      "\033[2K",      -1,    0,    0},
+	{ XK_Delete,        ShiftMask,      "\033[3;2~",    +1,    0,    0},
+	{ XK_Delete,        XK_ANY_MOD,     "\033[P",       -1,    0,    0},
+	{ XK_Delete,        XK_ANY_MOD,     "\033[3~",      +1,    0,    0},
+	{ XK_BackSpace,     XK_NO_MOD,      "\177",          0,    0,    0},
+	{ XK_Home,          ShiftMask,      "\033[2J",       0,   -1,    0},
+	{ XK_Home,          ShiftMask,      "\033[1;2H",     0,   +1,    0},
+	{ XK_Home,          XK_ANY_MOD,     "\033[H",        0,   -1,    0},
+	{ XK_Home,          XK_ANY_MOD,     "\033[1~",       0,   +1,    0},
+	{ XK_End,           ControlMask,    "\033[J",       -1,    0,    0},
+	{ XK_End,           ControlMask,    "\033[1;5F",    +1,    0,    0},
+	{ XK_End,           ShiftMask,      "\033[K",       -1,    0,    0},
+	{ XK_End,           ShiftMask,      "\033[1;2F",    +1,    0,    0},
+	{ XK_End,           XK_ANY_MOD,     "\033[4~",       0,    0,    0},
+	{ XK_Prior,         ControlMask,    "\033[5;5~",     0,    0,    0},
+	{ XK_Prior,         ShiftMask,      "\033[5;2~",     0,    0,    0},
+	{ XK_Prior,         XK_ANY_MOD,     "\033[5~",       0,    0,    0},
+	{ XK_Next,          ControlMask,    "\033[6;5~",     0,    0,    0},
+	{ XK_Next,          ShiftMask,      "\033[6;2~",     0,    0,    0},
+	{ XK_Next,          XK_ANY_MOD,     "\033[6~",       0,    0,    0},
+	{ XK_F1,            XK_NO_MOD,      "\033OP" ,       0,    0,    0},
+	{ XK_F1, /* F13 */  ShiftMask,      "\033[1;2P",     0,    0,    0},
+	{ XK_F1, /* F25 */  ControlMask,    "\033[1;5P",     0,    0,    0},
+	{ XK_F1, /* F37 */  Mod4Mask,       "\033[1;6P",     0,    0,    0},
+	{ XK_F1, /* F49 */  Mod1Mask,       "\033[1;3P",     0,    0,    0},
+	{ XK_F1, /* F61 */  Mod3Mask,       "\033[1;4P",     0,    0,    0},
+	{ XK_F2,            XK_NO_MOD,      "\033OQ" ,       0,    0,    0},
+	{ XK_F2, /* F14 */  ShiftMask,      "\033[1;2Q",     0,    0,    0},
+	{ XK_F2, /* F26 */  ControlMask,    "\033[1;5Q",     0,    0,    0},
+	{ XK_F2, /* F38 */  Mod4Mask,       "\033[1;6Q",     0,    0,    0},
+	{ XK_F2, /* F50 */  Mod1Mask,       "\033[1;3Q",     0,    0,    0},
+	{ XK_F2, /* F62 */  Mod3Mask,       "\033[1;4Q",     0,    0,    0},
+	{ XK_F3,            XK_NO_MOD,      "\033OR" ,       0,    0,    0},
+	{ XK_F3, /* F15 */  ShiftMask,      "\033[1;2R",     0,    0,    0},
+	{ XK_F3, /* F27 */  ControlMask,    "\033[1;5R",     0,    0,    0},
+	{ XK_F3, /* F39 */  Mod4Mask,       "\033[1;6R",     0,    0,    0},
+	{ XK_F3, /* F51 */  Mod1Mask,       "\033[1;3R",     0,    0,    0},
+	{ XK_F3, /* F63 */  Mod3Mask,       "\033[1;4R",     0,    0,    0},
+	{ XK_F4,            XK_NO_MOD,      "\033OS" ,       0,    0,    0},
+	{ XK_F4, /* F16 */  ShiftMask,      "\033[1;2S",     0,    0,    0},
+	{ XK_F4, /* F28 */  ControlMask,    "\033[1;5S",     0,    0,    0},
+	{ XK_F4, /* F40 */  Mod4Mask,       "\033[1;6S",     0,    0,    0},
+	{ XK_F4, /* F52 */  Mod1Mask,       "\033[1;3S",     0,    0,    0},
+	{ XK_F5,            XK_NO_MOD,      "\033[15~",      0,    0,    0},
+	{ XK_F5, /* F17 */  ShiftMask,      "\033[15;2~",    0,    0,    0},
+	{ XK_F5, /* F29 */  ControlMask,    "\033[15;5~",    0,    0,    0},
+	{ XK_F5, /* F41 */  Mod4Mask,       "\033[15;6~",    0,    0,    0},
+	{ XK_F5, /* F53 */  Mod1Mask,       "\033[15;3~",    0,    0,    0},
+	{ XK_F6,            XK_NO_MOD,      "\033[17~",      0,    0,    0},
+	{ XK_F6, /* F18 */  ShiftMask,      "\033[17;2~",    0,    0,    0},
+	{ XK_F6, /* F30 */  ControlMask,    "\033[17;5~",    0,    0,    0},
+	{ XK_F6, /* F42 */  Mod4Mask,       "\033[17;6~",    0,    0,    0},
+	{ XK_F6, /* F54 */  Mod1Mask,       "\033[17;3~",    0,    0,    0},
+	{ XK_F7,            XK_NO_MOD,      "\033[18~",      0,    0,    0},
+	{ XK_F7, /* F19 */  ShiftMask,      "\033[18;2~",    0,    0,    0},
+	{ XK_F7, /* F31 */  ControlMask,    "\033[18;5~",    0,    0,    0},
+	{ XK_F7, /* F43 */  Mod4Mask,       "\033[18;6~",    0,    0,    0},
+	{ XK_F7, /* F55 */  Mod1Mask,       "\033[18;3~",    0,    0,    0},
+	{ XK_F8,            XK_NO_MOD,      "\033[19~",      0,    0,    0},
+	{ XK_F8, /* F20 */  ShiftMask,      "\033[19;2~",    0,    0,    0},
+	{ XK_F8, /* F32 */  ControlMask,    "\033[19;5~",    0,    0,    0},
+	{ XK_F8, /* F44 */  Mod4Mask,       "\033[19;6~",    0,    0,    0},
+	{ XK_F8, /* F56 */  Mod1Mask,       "\033[19;3~",    0,    0,    0},
+	{ XK_F9,            XK_NO_MOD,      "\033[20~",      0,    0,    0},
+	{ XK_F9, /* F21 */  ShiftMask,      "\033[20;2~",    0,    0,    0},
+	{ XK_F9, /* F33 */  ControlMask,    "\033[20;5~",    0,    0,    0},
+	{ XK_F9, /* F45 */  Mod4Mask,       "\033[20;6~",    0,    0,    0},
+	{ XK_F9, /* F57 */  Mod1Mask,       "\033[20;3~",    0,    0,    0},
+	{ XK_F10,           XK_NO_MOD,      "\033[21~",      0,    0,    0},
+	{ XK_F10, /* F22 */ ShiftMask,      "\033[21;2~",    0,    0,    0},
+	{ XK_F10, /* F34 */ ControlMask,    "\033[21;5~",    0,    0,    0},
+	{ XK_F10, /* F46 */ Mod4Mask,       "\033[21;6~",    0,    0,    0},
+	{ XK_F10, /* F58 */ Mod1Mask,       "\033[21;3~",    0,    0,    0},
+	{ XK_F11,           XK_NO_MOD,      "\033[23~",      0,    0,    0},
+	{ XK_F11, /* F23 */ ShiftMask,      "\033[23;2~",    0,    0,    0},
+	{ XK_F11, /* F35 */ ControlMask,    "\033[23;5~",    0,    0,    0},
+	{ XK_F11, /* F47 */ Mod4Mask,       "\033[23;6~",    0,    0,    0},
+	{ XK_F11, /* F59 */ Mod1Mask,       "\033[23;3~",    0,    0,    0},
+	{ XK_F12,           XK_NO_MOD,      "\033[24~",      0,    0,    0},
+	{ XK_F12, /* F24 */ ShiftMask,      "\033[24;2~",    0,    0,    0},
+	{ XK_F12, /* F36 */ ControlMask,    "\033[24;5~",    0,    0,    0},
+	{ XK_F12, /* F48 */ Mod4Mask,       "\033[24;6~",    0,    0,    0},
+	{ XK_F12, /* F60 */ Mod1Mask,       "\033[24;3~",    0,    0,    0},
+	{ XK_F13,           XK_NO_MOD,      "\033[1;2P",     0,    0,    0},
+	{ XK_F14,           XK_NO_MOD,      "\033[1;2Q",     0,    0,    0},
+	{ XK_F15,           XK_NO_MOD,      "\033[1;2R",     0,    0,    0},
+	{ XK_F16,           XK_NO_MOD,      "\033[1;2S",     0,    0,    0},
+	{ XK_F17,           XK_NO_MOD,      "\033[15;2~",    0,    0,    0},
+	{ XK_F18,           XK_NO_MOD,      "\033[17;2~",    0,    0,    0},
+	{ XK_F19,           XK_NO_MOD,      "\033[18;2~",    0,    0,    0},
+	{ XK_F20,           XK_NO_MOD,      "\033[19;2~",    0,    0,    0},
+	{ XK_F21,           XK_NO_MOD,      "\033[20;2~",    0,    0,    0},
+	{ XK_F22,           XK_NO_MOD,      "\033[21;2~",    0,    0,    0},
+	{ XK_F23,           XK_NO_MOD,      "\033[23;2~",    0,    0,    0},
+	{ XK_F24,           XK_NO_MOD,      "\033[24;2~",    0,    0,    0},
+	{ XK_F25,           XK_NO_MOD,      "\033[1;5P",     0,    0,    0},
+	{ XK_F26,           XK_NO_MOD,      "\033[1;5Q",     0,    0,    0},
+	{ XK_F27,           XK_NO_MOD,      "\033[1;5R",     0,    0,    0},
+	{ XK_F28,           XK_NO_MOD,      "\033[1;5S",     0,    0,    0},
+	{ XK_F29,           XK_NO_MOD,      "\033[15;5~",    0,    0,    0},
+	{ XK_F30,           XK_NO_MOD,      "\033[17;5~",    0,    0,    0},
+	{ XK_F31,           XK_NO_MOD,      "\033[18;5~",    0,    0,    0},
+	{ XK_F32,           XK_NO_MOD,      "\033[19;5~",    0,    0,    0},
+	{ XK_F33,           XK_NO_MOD,      "\033[20;5~",    0,    0,    0},
+	{ XK_F34,           XK_NO_MOD,      "\033[21;5~",    0,    0,    0},
+	{ XK_F35,           XK_NO_MOD,      "\033[23;5~",    0,    0,    0},
+};
+
+/*
+ * Selection types' masks.
+ * Use the same masks as usual.
+ * Button1Mask is always unset, to make masks match between ButtonPress.
+ * ButtonRelease and MotionNotify.
+ * If no match is found, regular selection is used.
+ */
+static uint selmasks[] = {
+	[SEL_RECTANGULAR] = Mod1Mask,
+};
+
diff -Naur ../pkg/st-0.6/config.mk ./config.mk
--- ../pkg/st-0.6/config.mk	2015-07-07 16:26:44.000000000 -0400
+++ ./config.mk	2015-10-30 10:13:47.494538050 -0400
@@ -14,7 +14,7 @@
 INCS = -I. -I/usr/include -I${X11INC} \
        `pkg-config --cflags fontconfig` \
        `pkg-config --cflags freetype2`
-LIBS = -L/usr/lib -lc -L${X11LIB} -lm -lrt -lX11 -lutil -lXext -lXft \
+LIBS = -L/usr/lib -lc -L${X11LIB} -lm -lrt -lX11 -lutil -lXft -lXrender \
        `pkg-config --libs fontconfig`  \
        `pkg-config --libs freetype2`
 
diff -Naur ../pkg/st-0.6/custom-patch.diff ./custom-patch.diff
--- ../pkg/st-0.6/custom-patch.diff	1969-12-31 19:00:00.000000000 -0500
+++ ./custom-patch.diff	2015-10-30 10:34:41.639646865 -0400
@@ -0,0 +1,601 @@
+diff -Naur ../pkg/st-0.6/config.def.h ./config.def.h
+--- ../pkg/st-0.6/config.def.h	2015-07-07 16:26:44.000000000 -0400
++++ ./config.def.h	2015-10-30 10:13:47.494538050 -0400
+@@ -5,11 +5,21 @@
+  *
+  * font: see http://freedesktop.org/software/fontconfig/fontconfig-user.html
+  */
+-static char font[] = "Liberation Mono:pixelsize=12:antialias=false:autohint=false";
++static char font[] = "Liberation Mono:pixelsize=12:antialias=true:autohint=true";
+ static int borderpx = 2;
++static int histsize = 2000;
++
++/*
++ * What program is execed by st depends of these precedence rules:
++ * 1: program passed with -e
++ * 2: utmp option
++ * 3: SHELL environment variable
++ * 4: value of shell in /etc/passwd
++ * 5: value of shell in config.h
++ */
+ static char shell[] = "/bin/sh";
+ static char *utmp = NULL;
+-static char stty_args[] = "stty raw -echo -iexten echonl";
++static char stty_args[] = "stty raw pass8 nl -echo -iexten -cstopb 38400";
+ 
+ /* identification sequence returned in DA and DECID */
+ static char vtiden[] = "\033[?6c";
+@@ -30,7 +40,7 @@
+ static unsigned int tripleclicktimeout = 600;
+ 
+ /* alt screens */
+-static bool allowaltscreen = true;
++static int allowaltscreen = 1;
+ 
+ /* frames per second st should at maximum draw to the screen */
+ static unsigned int xfps = 120;
+@@ -53,12 +63,11 @@
+  */
+ static int bellvolume = 0;
+ 
+-/* TERM value */
++/* default TERM value */
+ static char termname[] = "st-256color";
+ 
+ static unsigned int tabspaces = 8;
+ 
+-
+ /* Terminal colors (16 first used in escape sequence) */
+ static const char *colorname[] = {
+ 	/* 8 normal colors */
+@@ -85,18 +94,39 @@
+ 
+ 	/* more colors can be added after 255 to use with DefaultXX */
+ 	"#cccccc",
++	"#555555",
+ };
+ 
++/* bg opacity */
++static const int alpha = 0xdd;
+ 
+ /*
+  * Default colors (colorname index)
+- * foreground, background, cursor
++ * foreground, background, cursor, reverse cursor
+  */
+ static unsigned int defaultfg = 7;
+ static unsigned int defaultbg = 0;
+ static unsigned int defaultcs = 256;
++static unsigned int defaultrcs = 257;
++
++/*
++ * Default shape of cursor
++ * 2: Block ("█")
++ * 4: Underline ("_")
++ * 6: Bar ("|")
++ * 7: Snowman ("☃")
++ */
++static unsigned int cursorshape = 2;
++
++/*
++ * Default colour and shape of the mouse cursor
++ */
++static unsigned int mouseshape = XC_xterm;
++static unsigned int mousefg = 7;
++static unsigned int mousebg = 0;
+ 
+ /*
++	"black",
+  * Colors used, when the specific fg == defaultfg. So in reverse mode this
+  * will reverse too. Another logic would only make the simple feature too
+  * complex.
+@@ -104,12 +134,20 @@
+ static unsigned int defaultitalic = 11;
+ static unsigned int defaultunderline = 7;
+ 
+-/* Internal mouse shortcuts. */
+-/* Beware that overloading Button1 will disable the selection. */
+-static Mousekey mshortcuts[] = {
++/*
++ * Internal mouse shortcuts.
++ * Beware that overloading Button1 will disable the selection.
++ */
++static Mousekey mkeys[] = {
+ 	/* button               mask            string */
+-	{ Button4,              XK_ANY_MOD,     "\031" },
+-	{ Button5,              XK_ANY_MOD,     "\005" },
++	{ Button4,              XK_NO_MOD,      "\031" },
++	{ Button5,              XK_NO_MOD,      "\005" },
++};
++
++static MouseShortcut mshortcuts[] = {
++	/* button               mask            function        argument */
++	{ Button4,              ShiftMask,      kscrollup,      { .i = 1 } },
++	{ Button5,              ShiftMask,      kscrolldown,    { .i = 1 } },
+ };
+ 
+ /* Internal keyboard shortcuts. */
+@@ -117,6 +155,7 @@
+ 
+ static Shortcut shortcuts[] = {
+ 	/* mask                 keysym          function        argument */
++	{ XK_ANY_MOD,           XK_Break,       sendbreak,      {.i =  0} },
+ 	{ ControlMask,          XK_Print,       toggleprinter,  {.i =  0} },
+ 	{ ShiftMask,            XK_Print,       printscreen,    {.i =  0} },
+ 	{ XK_ANY_MOD,           XK_Print,       printsel,       {.i =  0} },
+@@ -128,6 +167,8 @@
+ 	{ MODKEY|ShiftMask,     XK_C,           clipcopy,       {.i =  0} },
+ 	{ MODKEY|ShiftMask,     XK_V,           clippaste,      {.i =  0} },
+ 	{ MODKEY,               XK_Num_Lock,    numlock,        {.i =  0} },
++	{ ShiftMask,            XK_Page_Up,     kscrollup,      {.i = -1} },
++	{ ShiftMask,            XK_Page_Down,   kscrolldown,    {.i = -1} },
+ };
+ 
+ /*
+@@ -167,11 +208,17 @@
+  */
+ static uint ignoremod = Mod2Mask|XK_SWITCH_MOD;
+ 
+-/* Override mouse-select while mask is active (when MODE_MOUSE is set).
++/*
++ * Override mouse-select while mask is active (when MODE_MOUSE is set).
+  * Note that if you want to use ShiftMask with selmasks, set this to an other
+- * modifier, set to 0 to not use it. */
++ * modifier, set to 0 to not use it.
++ */
+ static uint forceselmod = ShiftMask;
+ 
++/*
++ * This is the huge key array which defines all compatibility to the Linux
++ * world. Please decide about changes wisely.
++ */
+ static Key key[] = {
+ 	/* keysym           mask            string      appkey appcursor crlf */
+ 	{ XK_KP_Home,       ShiftMask,      "\033[2J",       0,   -1,    0},
+diff -Naur ../pkg/st-0.6/config.h ./config.h
+--- ../pkg/st-0.6/config.h	1969-12-31 19:00:00.000000000 -0500
++++ ./config.h	2015-10-30 10:13:47.494538050 -0400
+@@ -0,0 +1,431 @@
++/* See LICENSE file for copyright and license details. */
++
++/*
++ * appearance
++ *
++ * font: see http://freedesktop.org/software/fontconfig/fontconfig-user.html
++ */
++static char font[] = "Source Code Pro:pixelsize=14:antialias=true:autohint=false";
++static int borderpx = 2;
++static int histsize = 2000;
++
++/*
++ * What program is execed by st depends of these precedence rules:
++ * 1: program passed with -e
++ * 2: utmp option
++ * 3: SHELL environment variable
++ * 4: value of shell in /etc/passwd
++ * 5: value of shell in config.h
++ */
++static char shell[] = "/bin/zsh";
++static char *utmp = NULL;
++static char stty_args[] = "stty raw pass8 nl -echo -iexten -cstopb 38400";
++
++/* identification sequence returned in DA and DECID */
++static char vtiden[] = "\033[?6c";
++
++/* Kerning / character bounding-box multipliers */
++static float cwscale = 1.0;
++static float chscale = 1.0;
++
++/*
++ * word delimiter string
++ *
++ * More advanced example: " `'\"()[]{}"
++ */
++static char worddelimiters[] = " ";
++
++/* selection timeouts (in milliseconds) */
++static unsigned int doubleclicktimeout = 300;
++static unsigned int tripleclicktimeout = 600;
++
++/* alt screens */
++static int allowaltscreen = 1;
++
++/* frames per second st should at maximum draw to the screen */
++static unsigned int xfps = 120;
++static unsigned int actionfps = 30;
++
++/*
++ * blinking timeout (set to 0 to disable blinking) for the terminal blinking
++ * attribute.
++ */
++static unsigned int blinktimeout = 800;
++
++/*
++ * thickness of underline and bar cursors
++ */
++static unsigned int cursorthickness = 2;
++
++/*
++ * bell volume. It must be a value between -100 and 100. Use 0 for disabling
++ * it
++ */
++static int bellvolume = 0;
++
++/* default TERM value */
++static char termname[] = "st-256color";
++
++static unsigned int tabspaces = 8;
++
++/* Terminal colors (16 first used in escape sequence) */
++static const char *colorname[] = {
++        /* 8 normal colors */
++        "black",
++        "#d75f5f",
++        "#87af5f",
++        "#ffaf5f",
++        "#87afd7",
++        "#8787af",
++        "#5f8787",
++        "#D0D0D0",
++        /* 8 bright colors */
++        "#404040",
++        "#EA8484",
++        "#C7F09F",
++        "#FFCC9A",
++        "#a5caef",
++        "#A6A6DE",
++        "#69b2b2",
++        "#d7d7d7",
++        "#080808",
++        [255] = 0,
++
++        /* more colors can be added after 255 to use with DefaultXX */
++        "#cccccc",
++        "#333333",
++};
++
++/* bg opacity */
++static const int alpha = 0xCC;
++
++/*
++ * Default colors (colorname index)
++ * foreground, background, cursor, reverse cursor
++ */
++static unsigned int defaultfg = 7;
++static unsigned int defaultbg = 0;
++static unsigned int defaultcs = 256;
++static unsigned int defaultrcs = 257;
++
++/*
++ * Default shape of cursor
++ * 2: Block ("█")
++ * 4: Underline ("_")
++ * 6: Bar ("|")
++ * 7: Snowman ("☃")
++ */
++static unsigned int cursorshape = 2;
++
++/*
++ * Default colour and shape of the mouse cursor
++ */
++static unsigned int mouseshape = XC_xterm;
++static unsigned int mousefg = 7;
++static unsigned int mousebg = 0;
++
++/*
++	"black",
++ * Colors used, when the specific fg == defaultfg. So in reverse mode this
++ * will reverse too. Another logic would only make the simple feature too
++ * complex.
++ */
++static unsigned int defaultitalic = 11;
++static unsigned int defaultunderline = 7;
++
++/*
++ * Internal mouse shortcuts.
++ * Beware that overloading Button1 will disable the selection.
++ */
++static Mousekey mkeys[] = {
++	/* button               mask            string */
++	{ Button4,              XK_NO_MOD,     "\031" },
++	{ Button5,              XK_NO_MOD,     "\005" },
++};
++
++static MouseShortcut mshortcuts[] = {
++        /* button               mask            function        argument */
++        { Button4,              ShiftMask,      kscrollup,      { .i = 1 } },
++        { Button5,              ShiftMask,      kscrolldown,    { .i = 1 } },
++};
++
++
++/* Internal keyboard shortcuts. */
++#define MODKEY Mod1Mask
++
++static Shortcut shortcuts[] = {
++	/* mask                 keysym          function        argument */
++	{ XK_ANY_MOD,           XK_Break,       sendbreak,      {.i =  0} },
++	{ ControlMask,          XK_Print,       toggleprinter,  {.i =  0} },
++	{ ShiftMask,            XK_Print,       printscreen,    {.i =  0} },
++	{ XK_ANY_MOD,           XK_Print,       printsel,       {.i =  0} },
++	{ MODKEY|ShiftMask,     XK_Prior,       xzoom,          {.f = +1} },
++	{ MODKEY|ShiftMask,     XK_Next,        xzoom,          {.f = -1} },
++	{ MODKEY|ShiftMask,     XK_Home,        xzoomreset,     {.f =  0} },
++	{ ShiftMask,            XK_Insert,      selpaste,       {.i =  0} },
++	{ MODKEY|ShiftMask,     XK_Insert,      clippaste,      {.i =  0} },
++	{ MODKEY|ShiftMask,     XK_C,           clipcopy,       {.i =  0} },
++	{ MODKEY|ShiftMask,     XK_V,           clippaste,      {.i =  0} },
++	{ MODKEY,               XK_Num_Lock,    numlock,        {.i =  0} },
++        { ShiftMask,            XK_Up,     kscrollup,      {.i = -1} },
++        { ShiftMask,            XK_Down,   kscrolldown,    {.i = -1} },
++};
++
++/*
++ * Special keys (change & recompile st.info accordingly)
++ *
++ * Mask value:
++ * * Use XK_ANY_MOD to match the key no matter modifiers state
++ * * Use XK_NO_MOD to match the key alone (no modifiers)
++ * appkey value:
++ * * 0: no value
++ * * > 0: keypad application mode enabled
++ * *   = 2: term.numlock = 1
++ * * < 0: keypad application mode disabled
++ * appcursor value:
++ * * 0: no value
++ * * > 0: cursor application mode enabled
++ * * < 0: cursor application mode disabled
++ * crlf value
++ * * 0: no value
++ * * > 0: crlf mode is enabled
++ * * < 0: crlf mode is disabled
++ *
++ * Be careful with the order of the definitions because st searches in
++ * this table sequentially, so any XK_ANY_MOD must be in the last
++ * position for a key.
++ */
++
++/*
++ * If you want keys other than the X11 function keys (0xFD00 - 0xFFFF)
++ * to be mapped below, add them to this array.
++ */
++static KeySym mappedkeys[] = { -1 };
++
++/*
++ * State bits to ignore when matching key or button events.  By default,
++ * numlock (Mod2Mask) and keyboard layout (XK_SWITCH_MOD) are ignored.
++ */
++static uint ignoremod = Mod2Mask|XK_SWITCH_MOD;
++
++/*
++ * Override mouse-select while mask is active (when MODE_MOUSE is set).
++ * Note that if you want to use ShiftMask with selmasks, set this to an other
++ * modifier, set to 0 to not use it.
++ */
++static uint forceselmod = ShiftMask;
++
++/*
++ * This is the huge key array which defines all compatibility to the Linux
++ * world. Please decide about changes wisely.
++ */
++static Key key[] = {
++	/* keysym           mask            string      appkey appcursor crlf */
++	{ XK_KP_Home,       ShiftMask,      "\033[2J",       0,   -1,    0},
++	{ XK_KP_Home,       ShiftMask,      "\033[1;2H",     0,   +1,    0},
++	{ XK_KP_Home,       XK_ANY_MOD,     "\033[H",        0,   -1,    0},
++	{ XK_KP_Home,       XK_ANY_MOD,     "\033[1~",       0,   +1,    0},
++	{ XK_KP_Up,         XK_ANY_MOD,     "\033Ox",       +1,    0,    0},
++	{ XK_KP_Up,         XK_ANY_MOD,     "\033[A",        0,   -1,    0},
++	{ XK_KP_Up,         XK_ANY_MOD,     "\033OA",        0,   +1,    0},
++	{ XK_KP_Down,       XK_ANY_MOD,     "\033Or",       +1,    0,    0},
++	{ XK_KP_Down,       XK_ANY_MOD,     "\033[B",        0,   -1,    0},
++	{ XK_KP_Down,       XK_ANY_MOD,     "\033OB",        0,   +1,    0},
++	{ XK_KP_Left,       XK_ANY_MOD,     "\033Ot",       +1,    0,    0},
++	{ XK_KP_Left,       XK_ANY_MOD,     "\033[D",        0,   -1,    0},
++	{ XK_KP_Left,       XK_ANY_MOD,     "\033OD",        0,   +1,    0},
++	{ XK_KP_Right,      XK_ANY_MOD,     "\033Ov",       +1,    0,    0},
++	{ XK_KP_Right,      XK_ANY_MOD,     "\033[C",        0,   -1,    0},
++	{ XK_KP_Right,      XK_ANY_MOD,     "\033OC",        0,   +1,    0},
++	{ XK_KP_Prior,      ShiftMask,      "\033[5;2~",     0,    0,    0},
++	{ XK_KP_Prior,      XK_ANY_MOD,     "\033[5~",       0,    0,    0},
++	{ XK_KP_Begin,      XK_ANY_MOD,     "\033[E",        0,    0,    0},
++	{ XK_KP_End,        ControlMask,    "\033[J",       -1,    0,    0},
++	{ XK_KP_End,        ControlMask,    "\033[1;5F",    +1,    0,    0},
++	{ XK_KP_End,        ShiftMask,      "\033[K",       -1,    0,    0},
++	{ XK_KP_End,        ShiftMask,      "\033[1;2F",    +1,    0,    0},
++	{ XK_KP_End,        XK_ANY_MOD,     "\033[4~",       0,    0,    0},
++	{ XK_KP_Next,       ShiftMask,      "\033[6;2~",     0,    0,    0},
++	{ XK_KP_Next,       XK_ANY_MOD,     "\033[6~",       0,    0,    0},
++	{ XK_KP_Insert,     ShiftMask,      "\033[2;2~",    +1,    0,    0},
++	{ XK_KP_Insert,     ShiftMask,      "\033[4l",      -1,    0,    0},
++	{ XK_KP_Insert,     ControlMask,    "\033[L",       -1,    0,    0},
++	{ XK_KP_Insert,     ControlMask,    "\033[2;5~",    +1,    0,    0},
++	{ XK_KP_Insert,     XK_ANY_MOD,     "\033[4h",      -1,    0,    0},
++	{ XK_KP_Insert,     XK_ANY_MOD,     "\033[2~",      +1,    0,    0},
++	{ XK_KP_Delete,     ControlMask,    "\033[M",       -1,    0,    0},
++	{ XK_KP_Delete,     ControlMask,    "\033[3;5~",    +1,    0,    0},
++	{ XK_KP_Delete,     ShiftMask,      "\033[2K",      -1,    0,    0},
++	{ XK_KP_Delete,     ShiftMask,      "\033[3;2~",    +1,    0,    0},
++	{ XK_KP_Delete,     XK_ANY_MOD,     "\033[P",       -1,    0,    0},
++	{ XK_KP_Delete,     XK_ANY_MOD,     "\033[3~",      +1,    0,    0},
++	{ XK_KP_Multiply,   XK_ANY_MOD,     "\033Oj",       +2,    0,    0},
++	{ XK_KP_Add,        XK_ANY_MOD,     "\033Ok",       +2,    0,    0},
++	{ XK_KP_Enter,      XK_ANY_MOD,     "\033OM",       +2,    0,    0},
++	{ XK_KP_Enter,      XK_ANY_MOD,     "\r",           -1,    0,   -1},
++	{ XK_KP_Enter,      XK_ANY_MOD,     "\r\n",         -1,    0,   +1},
++	{ XK_KP_Subtract,   XK_ANY_MOD,     "\033Om",       +2,    0,    0},
++	{ XK_KP_Decimal,    XK_ANY_MOD,     "\033On",       +2,    0,    0},
++	{ XK_KP_Divide,     XK_ANY_MOD,     "\033Oo",       +2,    0,    0},
++	{ XK_KP_0,          XK_ANY_MOD,     "\033Op",       +2,    0,    0},
++	{ XK_KP_1,          XK_ANY_MOD,     "\033Oq",       +2,    0,    0},
++	{ XK_KP_2,          XK_ANY_MOD,     "\033Or",       +2,    0,    0},
++	{ XK_KP_3,          XK_ANY_MOD,     "\033Os",       +2,    0,    0},
++	{ XK_KP_4,          XK_ANY_MOD,     "\033Ot",       +2,    0,    0},
++	{ XK_KP_5,          XK_ANY_MOD,     "\033Ou",       +2,    0,    0},
++	{ XK_KP_6,          XK_ANY_MOD,     "\033Ov",       +2,    0,    0},
++	{ XK_KP_7,          XK_ANY_MOD,     "\033Ow",       +2,    0,    0},
++	{ XK_KP_8,          XK_ANY_MOD,     "\033Ox",       +2,    0,    0},
++	{ XK_KP_9,          XK_ANY_MOD,     "\033Oy",       +2,    0,    0},
++	{ XK_Up,            ShiftMask,      "\033[1;2A",     0,    0,    0},
++	{ XK_Up,            ControlMask,    "\033[1;5A",     0,    0,    0},
++	{ XK_Up,            Mod1Mask,       "\033[1;3A",     0,    0,    0},
++	{ XK_Up,            XK_ANY_MOD,     "\033[A",        0,   -1,    0},
++	{ XK_Up,            XK_ANY_MOD,     "\033OA",        0,   +1,    0},
++	{ XK_Down,          ShiftMask,      "\033[1;2B",     0,    0,    0},
++	{ XK_Down,          ControlMask,    "\033[1;5B",     0,    0,    0},
++	{ XK_Down,          Mod1Mask,       "\033[1;3B",     0,    0,    0},
++	{ XK_Down,          XK_ANY_MOD,     "\033[B",        0,   -1,    0},
++	{ XK_Down,          XK_ANY_MOD,     "\033OB",        0,   +1,    0},
++	{ XK_Left,          ShiftMask,      "\033[1;2D",     0,    0,    0},
++	{ XK_Left,          ControlMask,    "\033[1;5D",     0,    0,    0},
++	{ XK_Left,          Mod1Mask,       "\033[1;3D",     0,    0,    0},
++	{ XK_Left,          XK_ANY_MOD,     "\033[D",        0,   -1,    0},
++	{ XK_Left,          XK_ANY_MOD,     "\033OD",        0,   +1,    0},
++	{ XK_Right,         ShiftMask,      "\033[1;2C",     0,    0,    0},
++	{ XK_Right,         ControlMask,    "\033[1;5C",     0,    0,    0},
++	{ XK_Right,         Mod1Mask,       "\033[1;3C",     0,    0,    0},
++	{ XK_Right,         XK_ANY_MOD,     "\033[C",        0,   -1,    0},
++	{ XK_Right,         XK_ANY_MOD,     "\033OC",        0,   +1,    0},
++	{ XK_ISO_Left_Tab,  ShiftMask,      "\033[Z",        0,    0,    0},
++	{ XK_Return,        Mod1Mask,       "\033\r",        0,    0,   -1},
++	{ XK_Return,        Mod1Mask,       "\033\r\n",      0,    0,   +1},
++	{ XK_Return,        XK_ANY_MOD,     "\r",            0,    0,   -1},
++	{ XK_Return,        XK_ANY_MOD,     "\r\n",          0,    0,   +1},
++	{ XK_Insert,        ShiftMask,      "\033[4l",      -1,    0,    0},
++	{ XK_Insert,        ShiftMask,      "\033[2;2~",    +1,    0,    0},
++	{ XK_Insert,        ControlMask,    "\033[L",       -1,    0,    0},
++	{ XK_Insert,        ControlMask,    "\033[2;5~",    +1,    0,    0},
++	{ XK_Insert,        XK_ANY_MOD,     "\033[4h",      -1,    0,    0},
++	{ XK_Insert,        XK_ANY_MOD,     "\033[2~",      +1,    0,    0},
++	{ XK_Delete,        ControlMask,    "\033[M",       -1,    0,    0},
++	{ XK_Delete,        ControlMask,    "\033[3;5~",    +1,    0,    0},
++	{ XK_Delete,        ShiftMask,      "\033[2K",      -1,    0,    0},
++	{ XK_Delete,        ShiftMask,      "\033[3;2~",    +1,    0,    0},
++	{ XK_Delete,        XK_ANY_MOD,     "\033[P",       -1,    0,    0},
++	{ XK_Delete,        XK_ANY_MOD,     "\033[3~",      +1,    0,    0},
++	{ XK_BackSpace,     XK_NO_MOD,      "\177",          0,    0,    0},
++	{ XK_Home,          ShiftMask,      "\033[2J",       0,   -1,    0},
++	{ XK_Home,          ShiftMask,      "\033[1;2H",     0,   +1,    0},
++	{ XK_Home,          XK_ANY_MOD,     "\033[H",        0,   -1,    0},
++	{ XK_Home,          XK_ANY_MOD,     "\033[1~",       0,   +1,    0},
++	{ XK_End,           ControlMask,    "\033[J",       -1,    0,    0},
++	{ XK_End,           ControlMask,    "\033[1;5F",    +1,    0,    0},
++	{ XK_End,           ShiftMask,      "\033[K",       -1,    0,    0},
++	{ XK_End,           ShiftMask,      "\033[1;2F",    +1,    0,    0},
++	{ XK_End,           XK_ANY_MOD,     "\033[4~",       0,    0,    0},
++	{ XK_Prior,         ControlMask,    "\033[5;5~",     0,    0,    0},
++	{ XK_Prior,         ShiftMask,      "\033[5;2~",     0,    0,    0},
++	{ XK_Prior,         XK_ANY_MOD,     "\033[5~",       0,    0,    0},
++	{ XK_Next,          ControlMask,    "\033[6;5~",     0,    0,    0},
++	{ XK_Next,          ShiftMask,      "\033[6;2~",     0,    0,    0},
++	{ XK_Next,          XK_ANY_MOD,     "\033[6~",       0,    0,    0},
++	{ XK_F1,            XK_NO_MOD,      "\033OP" ,       0,    0,    0},
++	{ XK_F1, /* F13 */  ShiftMask,      "\033[1;2P",     0,    0,    0},
++	{ XK_F1, /* F25 */  ControlMask,    "\033[1;5P",     0,    0,    0},
++	{ XK_F1, /* F37 */  Mod4Mask,       "\033[1;6P",     0,    0,    0},
++	{ XK_F1, /* F49 */  Mod1Mask,       "\033[1;3P",     0,    0,    0},
++	{ XK_F1, /* F61 */  Mod3Mask,       "\033[1;4P",     0,    0,    0},
++	{ XK_F2,            XK_NO_MOD,      "\033OQ" ,       0,    0,    0},
++	{ XK_F2, /* F14 */  ShiftMask,      "\033[1;2Q",     0,    0,    0},
++	{ XK_F2, /* F26 */  ControlMask,    "\033[1;5Q",     0,    0,    0},
++	{ XK_F2, /* F38 */  Mod4Mask,       "\033[1;6Q",     0,    0,    0},
++	{ XK_F2, /* F50 */  Mod1Mask,       "\033[1;3Q",     0,    0,    0},
++	{ XK_F2, /* F62 */  Mod3Mask,       "\033[1;4Q",     0,    0,    0},
++	{ XK_F3,            XK_NO_MOD,      "\033OR" ,       0,    0,    0},
++	{ XK_F3, /* F15 */  ShiftMask,      "\033[1;2R",     0,    0,    0},
++	{ XK_F3, /* F27 */  ControlMask,    "\033[1;5R",     0,    0,    0},
++	{ XK_F3, /* F39 */  Mod4Mask,       "\033[1;6R",     0,    0,    0},
++	{ XK_F3, /* F51 */  Mod1Mask,       "\033[1;3R",     0,    0,    0},
++	{ XK_F3, /* F63 */  Mod3Mask,       "\033[1;4R",     0,    0,    0},
++	{ XK_F4,            XK_NO_MOD,      "\033OS" ,       0,    0,    0},
++	{ XK_F4, /* F16 */  ShiftMask,      "\033[1;2S",     0,    0,    0},
++	{ XK_F4, /* F28 */  ControlMask,    "\033[1;5S",     0,    0,    0},
++	{ XK_F4, /* F40 */  Mod4Mask,       "\033[1;6S",     0,    0,    0},
++	{ XK_F4, /* F52 */  Mod1Mask,       "\033[1;3S",     0,    0,    0},
++	{ XK_F5,            XK_NO_MOD,      "\033[15~",      0,    0,    0},
++	{ XK_F5, /* F17 */  ShiftMask,      "\033[15;2~",    0,    0,    0},
++	{ XK_F5, /* F29 */  ControlMask,    "\033[15;5~",    0,    0,    0},
++	{ XK_F5, /* F41 */  Mod4Mask,       "\033[15;6~",    0,    0,    0},
++	{ XK_F5, /* F53 */  Mod1Mask,       "\033[15;3~",    0,    0,    0},
++	{ XK_F6,            XK_NO_MOD,      "\033[17~",      0,    0,    0},
++	{ XK_F6, /* F18 */  ShiftMask,      "\033[17;2~",    0,    0,    0},
++	{ XK_F6, /* F30 */  ControlMask,    "\033[17;5~",    0,    0,    0},
++	{ XK_F6, /* F42 */  Mod4Mask,       "\033[17;6~",    0,    0,    0},
++	{ XK_F6, /* F54 */  Mod1Mask,       "\033[17;3~",    0,    0,    0},
++	{ XK_F7,            XK_NO_MOD,      "\033[18~",      0,    0,    0},
++	{ XK_F7, /* F19 */  ShiftMask,      "\033[18;2~",    0,    0,    0},
++	{ XK_F7, /* F31 */  ControlMask,    "\033[18;5~",    0,    0,    0},
++	{ XK_F7, /* F43 */  Mod4Mask,       "\033[18;6~",    0,    0,    0},
++	{ XK_F7, /* F55 */  Mod1Mask,       "\033[18;3~",    0,    0,    0},
++	{ XK_F8,            XK_NO_MOD,      "\033[19~",      0,    0,    0},
++	{ XK_F8, /* F20 */  ShiftMask,      "\033[19;2~",    0,    0,    0},
++	{ XK_F8, /* F32 */  ControlMask,    "\033[19;5~",    0,    0,    0},
++	{ XK_F8, /* F44 */  Mod4Mask,       "\033[19;6~",    0,    0,    0},
++	{ XK_F8, /* F56 */  Mod1Mask,       "\033[19;3~",    0,    0,    0},
++	{ XK_F9,            XK_NO_MOD,      "\033[20~",      0,    0,    0},
++	{ XK_F9, /* F21 */  ShiftMask,      "\033[20;2~",    0,    0,    0},
++	{ XK_F9, /* F33 */  ControlMask,    "\033[20;5~",    0,    0,    0},
++	{ XK_F9, /* F45 */  Mod4Mask,       "\033[20;6~",    0,    0,    0},
++	{ XK_F9, /* F57 */  Mod1Mask,       "\033[20;3~",    0,    0,    0},
++	{ XK_F10,           XK_NO_MOD,      "\033[21~",      0,    0,    0},
++	{ XK_F10, /* F22 */ ShiftMask,      "\033[21;2~",    0,    0,    0},
++	{ XK_F10, /* F34 */ ControlMask,    "\033[21;5~",    0,    0,    0},
++	{ XK_F10, /* F46 */ Mod4Mask,       "\033[21;6~",    0,    0,    0},
++	{ XK_F10, /* F58 */ Mod1Mask,       "\033[21;3~",    0,    0,    0},
++	{ XK_F11,           XK_NO_MOD,      "\033[23~",      0,    0,    0},
++	{ XK_F11, /* F23 */ ShiftMask,      "\033[23;2~",    0,    0,    0},
++	{ XK_F11, /* F35 */ ControlMask,    "\033[23;5~",    0,    0,    0},
++	{ XK_F11, /* F47 */ Mod4Mask,       "\033[23;6~",    0,    0,    0},
++	{ XK_F11, /* F59 */ Mod1Mask,       "\033[23;3~",    0,    0,    0},
++	{ XK_F12,           XK_NO_MOD,      "\033[24~",      0,    0,    0},
++	{ XK_F12, /* F24 */ ShiftMask,      "\033[24;2~",    0,    0,    0},
++	{ XK_F12, /* F36 */ ControlMask,    "\033[24;5~",    0,    0,    0},
++	{ XK_F12, /* F48 */ Mod4Mask,       "\033[24;6~",    0,    0,    0},
++	{ XK_F12, /* F60 */ Mod1Mask,       "\033[24;3~",    0,    0,    0},
++	{ XK_F13,           XK_NO_MOD,      "\033[1;2P",     0,    0,    0},
++	{ XK_F14,           XK_NO_MOD,      "\033[1;2Q",     0,    0,    0},
++	{ XK_F15,           XK_NO_MOD,      "\033[1;2R",     0,    0,    0},
++	{ XK_F16,           XK_NO_MOD,      "\033[1;2S",     0,    0,    0},
++	{ XK_F17,           XK_NO_MOD,      "\033[15;2~",    0,    0,    0},
++	{ XK_F18,           XK_NO_MOD,      "\033[17;2~",    0,    0,    0},
++	{ XK_F19,           XK_NO_MOD,      "\033[18;2~",    0,    0,    0},
++	{ XK_F20,           XK_NO_MOD,      "\033[19;2~",    0,    0,    0},
++	{ XK_F21,           XK_NO_MOD,      "\033[20;2~",    0,    0,    0},
++	{ XK_F22,           XK_NO_MOD,      "\033[21;2~",    0,    0,    0},
++	{ XK_F23,           XK_NO_MOD,      "\033[23;2~",    0,    0,    0},
++	{ XK_F24,           XK_NO_MOD,      "\033[24;2~",    0,    0,    0},
++	{ XK_F25,           XK_NO_MOD,      "\033[1;5P",     0,    0,    0},
++	{ XK_F26,           XK_NO_MOD,      "\033[1;5Q",     0,    0,    0},
++	{ XK_F27,           XK_NO_MOD,      "\033[1;5R",     0,    0,    0},
++	{ XK_F28,           XK_NO_MOD,      "\033[1;5S",     0,    0,    0},
++	{ XK_F29,           XK_NO_MOD,      "\033[15;5~",    0,    0,    0},
++	{ XK_F30,           XK_NO_MOD,      "\033[17;5~",    0,    0,    0},
++	{ XK_F31,           XK_NO_MOD,      "\033[18;5~",    0,    0,    0},
++	{ XK_F32,           XK_NO_MOD,      "\033[19;5~",    0,    0,    0},
++	{ XK_F33,           XK_NO_MOD,      "\033[20;5~",    0,    0,    0},
++	{ XK_F34,           XK_NO_MOD,      "\033[21;5~",    0,    0,    0},
++	{ XK_F35,           XK_NO_MOD,      "\033[23;5~",    0,    0,    0},
++};
++
++/*
++ * Selection types' masks.
++ * Use the same masks as usual.
++ * Button1Mask is always unset, to make masks match between ButtonPress.
++ * ButtonRelease and MotionNotify.
++ * If no match is found, regular selection is used.
++ */
++static uint selmasks[] = {
++	[SEL_RECTANGULAR] = Mod1Mask,
++};
++
+diff -Naur ../pkg/st-0.6/config.mk ./config.mk
+--- ../pkg/st-0.6/config.mk	2015-07-07 16:26:44.000000000 -0400
++++ ./config.mk	2015-10-30 10:13:47.494538050 -0400
+@@ -14,7 +14,7 @@
+ INCS = -I. -I/usr/include -I${X11INC} \
+        `pkg-config --cflags fontconfig` \
+        `pkg-config --cflags freetype2`
+-LIBS = -L/usr/lib -lc -L${X11LIB} -lm -lrt -lX11 -lutil -lXext -lXft \
++LIBS = -L/usr/lib -lc -L${X11LIB} -lm -lrt -lX11 -lutil -lXft -lXrender \
+        `pkg-config --libs fontconfig`  \
+        `pkg-config --libs freetype2`
+ 
diff -Naur ../pkg/st-0.6/LICENSE ./LICENSE
--- ../pkg/st-0.6/LICENSE	2015-07-07 16:26:44.000000000 -0400
+++ ./LICENSE	2015-10-30 10:13:47.494538050 -0400
@@ -10,7 +10,7 @@
 © 2013 Eric Pruitt <eric.pruitt at gmail dot com>
 © 2013 Michael Forney <mforney at mforney dot org>
 © 2013-2014 Markus Teich <markus dot teich at stusta dot mhn dot de>
-© 2014 Laslo Hunhold <dev at frign dot de>
+© 2014-2015 Laslo Hunhold <dev at frign dot de>
 
 Permission is hereby granted, free of charge, to any person obtaining a
 copy of this software and associated documentation files (the "Software"),
diff -Naur ../pkg/st-0.6/st.1 ./st.1
--- ../pkg/st-0.6/st.1	2015-07-07 16:26:44.000000000 -0400
+++ ./st.1	2015-10-30 10:13:47.494538050 -0400
@@ -15,6 +15,8 @@
 .IR file ]
 .RB [ \-t 
 .IR title ]
+.RB [ \-T
+.IR title ]
 .RB [ \-l
 .IR line ]
 .RB [ \-w 
@@ -37,13 +39,13 @@
 .IR file ]
 .RB [ \-t
 .IR title ]
-.RB [ \-l
-.IR line ]
+.RB [ \-T
+.IR title ]
 .RB [ \-w
 .IR windowid ]
 .RB [ \-v ]
-.RB [ \-l
-.IR line ]
+.RB \-l
+.IR line
 .RI [ stty_args ...]
 .SH DESCRIPTION
 .B st
@@ -79,14 +81,32 @@
 .BI \-t " title"
 defines the window title (default 'st').
 .TP
+.BI \-T " title"
+defines the window title (default 'st').
+.TP
 .BI \-w " windowid"
 embeds st within the window identified by 
 .I windowid
 .TP
 .BI \-l " line"
-use a tty line instead of a pseudo terminal.
-When this flag is used
-remaining arguments are used as flags for stty.
+use a tty
+.I line
+instead of a pseudo terminal.
+.I line
+should be a (pseudo-)serial device (e.g. /dev/ttySO on Linux for serial port
+0).
+When this flag is given
+remaining arguments are used as flags for
+.BR stty(1).
+By default st initializes the serial line to 8 bits, no parity, 1 stop bit
+and a 38400 baud rate. The speed is set by appending it as last argument
+(e.g. 'st -l 115200'). Arguments before the last one are
+.BR stty(1)
+flags. If you want to set odd parity on 115200 baud use for example 'st -l
+parenb parodd 115200'. Set the number of bits by using for example 'st -l cs7
+115200'. See
+.BR stty(1)
+for more arguments and cases.
 .TP
 .B \-v
 prints version information to stderr, then exits.
@@ -102,6 +122,11 @@
 even without it.
 .SH SHORTCUTS
 .TP
+.B Break
+Send a break in the serial line.
+Break key is obtained in PC keyboards
+pressing at the same time control and pause.
+.TP
 .B Ctrl-Print Screen
 Toggle if st should print to the
 .I iofile.
diff -Naur ../pkg/st-0.6/st.c ./st.c
--- ../pkg/st-0.6/st.c	2015-07-07 16:26:44.000000000 -0400
+++ ./st.c	2015-10-30 10:13:47.494538050 -0400
@@ -6,7 +6,6 @@
 #include <locale.h>
 #include <pwd.h>
 #include <stdarg.h>
-#include <stdbool.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
@@ -18,6 +17,7 @@
 #include <sys/time.h>
 #include <sys/types.h>
 #include <sys/wait.h>
+#include <termios.h>
 #include <time.h>
 #include <unistd.h>
 #include <libgen.h>
@@ -61,28 +61,34 @@
 #define XK_ANY_MOD    UINT_MAX
 #define XK_NO_MOD     0
 #define XK_SWITCH_MOD (1<<13)
+#define OPAQUE 0xff
 
 /* macros */
-#define MIN(a, b)  ((a) < (b) ? (a) : (b))
-#define MAX(a, b)  ((a) < (b) ? (b) : (a))
-#define LEN(a)     (sizeof(a) / sizeof(a)[0])
-#define DEFAULT(a, b)     (a) = (a) ? (a) : (b)
-#define BETWEEN(x, a, b)  ((a) <= (x) && (x) <= (b))
-#define ISCONTROLC0(c) (BETWEEN(c, 0, 0x1f) || (c) == '\177')
-#define ISCONTROLC1(c) (BETWEEN(c, 0x80, 0x9f))
-#define ISCONTROL(c) (ISCONTROLC0(c) || ISCONTROLC1(c))
-#define ISDELIM(u) (utf8strchr(worddelimiters, u) != NULL)
-#define LIMIT(x, a, b)    (x) = (x) < (a) ? (a) : (x) > (b) ? (b) : (x)
-#define ATTRCMP(a, b) ((a).mode != (b).mode || (a).fg != (b).fg || (a).bg != (b).bg)
-#define IS_SET(flag) ((term.mode & (flag)) != 0)
-#define TIMEDIFF(t1, t2) ((t1.tv_sec-t2.tv_sec)*1000 + (t1.tv_nsec-t2.tv_nsec)/1E6)
-#define MODBIT(x, set, bit) ((set) ? ((x) |= (bit)) : ((x) &= ~(bit)))
-
-#define TRUECOLOR(r,g,b) (1 << 24 | (r) << 16 | (g) << 8 | (b))
-#define IS_TRUECOL(x)    (1 << 24 & (x))
-#define TRUERED(x)       (((x) & 0xff0000) >> 8)
-#define TRUEGREEN(x)     (((x) & 0xff00))
-#define TRUEBLUE(x)      (((x) & 0xff) << 8)
+#define MIN(a, b)		((a) < (b) ? (a) : (b))
+#define MAX(a, b)		((a) < (b) ? (b) : (a))
+#define LEN(a)			(sizeof(a) / sizeof(a)[0])
+#define DEFAULT(a, b)		(a) = (a) ? (a) : (b)
+#define BETWEEN(x, a, b)	((a) <= (x) && (x) <= (b))
+#define ISCONTROLC0(c)		(BETWEEN(c, 0, 0x1f) || (c) == '\177')
+#define ISCONTROLC1(c)		(BETWEEN(c, 0x80, 0x9f))
+#define ISCONTROL(c)		(ISCONTROLC0(c) || ISCONTROLC1(c))
+#define ISDELIM(u)		(utf8strchr(worddelimiters, u) != NULL)
+#define LIMIT(x, a, b)		(x) = (x) < (a) ? (a) : (x) > (b) ? (b) : (x)
+#define ATTRCMP(a, b)		((a).mode != (b).mode || (a).fg != (b).fg || \
+				(a).bg != (b).bg)
+#define IS_SET(flag)		((term.mode & (flag)) != 0)
+#define TIMEDIFF(t1, t2)	((t1.tv_sec-t2.tv_sec)*1000 + \
+				(t1.tv_nsec-t2.tv_nsec)/1E6)
+#define MODBIT(x, set, bit)	((set) ? ((x) |= (bit)) : ((x) &= ~(bit)))
+#define USE_ARGB (alpha != OPAQUE && opt_embed == NULL)
+
+#define TRUECOLOR(r,g,b)	(1 << 24 | (r) << 16 | (g) << 8 | (b))
+#define IS_TRUECOL(x)		(1 << 24 & (x))
+#define TRUERED(x)		(((x) & 0xff0000) >> 8)
+#define TRUEGREEN(x)		(((x) & 0xff00))
+#define TRUEBLUE(x)		(((x) & 0xff) << 8)
+#define TLINE(y)		((y) < term.scr ? term.hist[((y) + term.histi - term.scr \
+				+ histsize + 1) % histsize] : term.line[(y) - term.scr])
 
 
 enum glyph_attribute {
@@ -231,7 +237,10 @@
 	int col;      /* nb col */
 	Line *line;   /* screen */
 	Line *alt;    /* alternate screen */
-	bool *dirty;  /* dirtyness of lines */
+	Line *hist;   /* history buffer */
+	int histi;    /* history index */
+	int scr;      /* scroll back */
+	int *dirty;  /* dirtyness of lines */
 	XftGlyphFontSpec *specbuf; /* font spec buffer used for rendering */
 	TCursor c;    /* cursor */
 	int top;      /* top    scroll limit */
@@ -241,8 +250,8 @@
 	char trantbl[4]; /* charset table translation */
 	int charset;  /* current charset */
 	int icharset; /* selected charset for sequence */
-	bool numlock; /* lock numbers in keyboard */
-	bool *tabs;
+	int numlock; /* lock numbers in keyboard */
+	int *tabs;
 } Term;
 
 /* Purely graphic info */
@@ -258,13 +267,14 @@
 	Visual *vis;
 	XSetWindowAttributes attrs;
 	int scr;
-	bool isfixed; /* is fixed geometry? */
+	int isfixed; /* is fixed geometry? */
 	int l, t; /* left and top offset */
 	int gm; /* geometry mask */
 	int tw, th; /* tty width and height */
 	int w, h; /* window width and height */
 	int ch; /* char height */
 	int cw; /* char width  */
+	int depth; /* bit depth */
 	char state; /* focus, redraw, visible */
 	int cursor; /* cursor style */
 } XWindow;
@@ -302,7 +312,7 @@
 
 	char *primary, *clipboard;
 	Atom xtarget;
-	bool alt;
+	int alt;
 	struct timespec tclick1;
 	struct timespec tclick2;
 } Selection;
@@ -315,6 +325,13 @@
 } Arg;
 
 typedef struct {
+	uint b;
+	uint mask;
+	void (*func)(const Arg *);
+	const Arg arg;
+} MouseShortcut;
+
+typedef struct {
 	uint mod;
 	KeySym keysym;
 	void (*func)(const Arg *);
@@ -322,6 +339,8 @@
 } Shortcut;
 
 /* function definitions used in config.h */
+static void kscrolldown(const Arg *);
+static void kscrollup(const Arg *);
 static void clipcopy(const Arg *);
 static void clippaste(const Arg *);
 static void numlock(const Arg *);
@@ -332,6 +351,7 @@
 static void printsel(const Arg *);
 static void printscreen(const Arg *) ;
 static void toggleprinter(const Arg *);
+static void sendbreak(const Arg *);
 
 /* Config.h for applying patches and the configuration. */
 #include "config.h"
@@ -395,22 +415,22 @@
 static void tputc(Rune);
 static void treset(void);
 static void tresize(int, int);
-static void tscrollup(int, int);
-static void tscrolldown(int, int);
+static void tscrollup(int, int, int);
+static void tscrolldown(int, int, int);
 static void tsetattr(int *, int);
 static void tsetchar(Rune, Glyph *, int, int);
 static void tsetscroll(int, int);
 static void tswapscreen(void);
 static void tsetdirt(int, int);
 static void tsetdirtattr(int);
-static void tsetmode(bool, bool, int *, int);
+static void tsetmode(int, int, int *, int);
 static void tfulldirt(void);
 static void techo(Rune);
 static void tcontrolcode(uchar );
 static void tdectest(char );
 static int32_t tdefcolor(int *, int *, int);
 static void tdeftran(char);
-static inline bool match(uint, uint);
+static inline int match(uint, uint);
 static void ttynew(void);
 static void ttyread(void);
 static void ttyresize(void);
@@ -453,13 +473,14 @@
 static void brelease(XEvent *);
 static void bpress(XEvent *);
 static void bmotion(XEvent *);
+static void propnotify(XEvent *);
 static void selnotify(XEvent *);
 static void selclear(XEvent *);
 static void selrequest(XEvent *);
 
 static void selinit(void);
 static void selnormalize(void);
-static inline bool selected(int, int);
+static inline int selected(int, int);
 static char *getsel(void);
 static void selcopy(Time);
 static void selscroll(int, int);
@@ -501,6 +522,11 @@
  */
 /*	[SelectionClear] = selclear, */
 	[SelectionNotify] = selnotify,
+/*
+ * PropertyNotify is only turned on when there is some INCR transfer happening
+ * for the selection retrieval.
+ */
+	[PropertyNotify] = propnotify,
 	[SelectionRequest] = selrequest,
 };
 
@@ -513,7 +539,7 @@
 static int cmdfd;
 static pid_t pid;
 static Selection sel;
-static int iofd = STDOUT_FILENO;
+static int iofd = 1;
 static char **opt_cmd = NULL;
 static char *opt_io = NULL;
 static char *opt_title = NULL;
@@ -551,135 +577,156 @@
 static int frclen = 0;
 
 ssize_t
-xwrite(int fd, const char *s, size_t len) {
+xwrite(int fd, const char *s, size_t len)
+{
 	size_t aux = len;
+	ssize_t r;
 
-	while(len > 0) {
-		ssize_t r = write(fd, s, len);
-		if(r < 0)
+	while (len > 0) {
+		r = write(fd, s, len);
+		if (r < 0)
 			return r;
 		len -= r;
 		s += r;
 	}
+
 	return aux;
 }
 
 void *
-xmalloc(size_t len) {
+xmalloc(size_t len)
+{
 	void *p = malloc(len);
 
-	if(!p)
+	if (!p)
 		die("Out of memory\n");
 
 	return p;
 }
 
 void *
-xrealloc(void *p, size_t len) {
-	if((p = realloc(p, len)) == NULL)
+xrealloc(void *p, size_t len)
+{
+	if ((p = realloc(p, len)) == NULL)
 		die("Out of memory\n");
 
 	return p;
 }
 
 char *
-xstrdup(char *s) {
-	if((s = strdup(s)) == NULL)
+xstrdup(char *s)
+{
+	if ((s = strdup(s)) == NULL)
 		die("Out of memory\n");
 
 	return s;
 }
 
 size_t
-utf8decode(char *c, Rune *u, size_t clen) {
+utf8decode(char *c, Rune *u, size_t clen)
+{
 	size_t i, j, len, type;
 	Rune udecoded;
 
 	*u = UTF_INVALID;
-	if(!clen)
+	if (!clen)
 		return 0;
 	udecoded = utf8decodebyte(c[0], &len);
-	if(!BETWEEN(len, 1, UTF_SIZ))
+	if (!BETWEEN(len, 1, UTF_SIZ))
 		return 1;
-	for(i = 1, j = 1; i < clen && j < len; ++i, ++j) {
+	for (i = 1, j = 1; i < clen && j < len; ++i, ++j) {
 		udecoded = (udecoded << 6) | utf8decodebyte(c[i], &type);
-		if(type != 0)
+		if (type != 0)
 			return j;
 	}
-	if(j < len)
+	if (j < len)
 		return 0;
 	*u = udecoded;
 	utf8validate(u, len);
+
 	return len;
 }
 
 Rune
-utf8decodebyte(char c, size_t *i) {
-	for(*i = 0; *i < LEN(utfmask); ++(*i))
-		if(((uchar)c & utfmask[*i]) == utfbyte[*i])
+utf8decodebyte(char c, size_t *i)
+{
+	for (*i = 0; *i < LEN(utfmask); ++(*i))
+		if (((uchar)c & utfmask[*i]) == utfbyte[*i])
 			return (uchar)c & ~utfmask[*i];
+
 	return 0;
 }
 
 size_t
-utf8encode(Rune u, char *c) {
+utf8encode(Rune u, char *c)
+{
 	size_t len, i;
 
 	len = utf8validate(&u, 0);
-	if(len > UTF_SIZ)
+	if (len > UTF_SIZ)
 		return 0;
-	for(i = len - 1; i != 0; --i) {
+
+	for (i = len - 1; i != 0; --i) {
 		c[i] = utf8encodebyte(u, 0);
 		u >>= 6;
 	}
 	c[0] = utf8encodebyte(u, len);
+
 	return len;
 }
 
 char
-utf8encodebyte(Rune u, size_t i) {
+utf8encodebyte(Rune u, size_t i)
+{
 	return utfbyte[i] | (u & ~utfmask[i]);
 }
 
 char *
-utf8strchr(char *s, Rune u) {
+utf8strchr(char *s, Rune u)
+{
 	Rune r;
 	size_t i, j, len;
 
 	len = strlen(s);
-	for(i = 0, j = 0; i < len; i += j) {
-		if(!(j = utf8decode(&s[i], &r, len - i)))
+	for (i = 0, j = 0; i < len; i += j) {
+		if (!(j = utf8decode(&s[i], &r, len - i)))
 			break;
-		if(r == u)
+		if (r == u)
 			return &(s[i]);
 	}
+
 	return NULL;
 }
 
 size_t
-utf8validate(Rune *u, size_t i) {
-	if(!BETWEEN(*u, utfmin[i], utfmax[i]) || BETWEEN(*u, 0xD800, 0xDFFF))
+utf8validate(Rune *u, size_t i)
+{
+	if (!BETWEEN(*u, utfmin[i], utfmax[i]) || BETWEEN(*u, 0xD800, 0xDFFF))
 		*u = UTF_INVALID;
-	for(i = 1; *u > utfmax[i]; ++i)
+	for (i = 1; *u > utfmax[i]; ++i)
 		;
+
 	return i;
 }
 
 void
-selinit(void) {
-	memset(&sel.tclick1, 0, sizeof(sel.tclick1));
-	memset(&sel.tclick2, 0, sizeof(sel.tclick2));
+selinit(void)
+{
+	clock_gettime(CLOCK_MONOTONIC, &sel.tclick1);
+	clock_gettime(CLOCK_MONOTONIC, &sel.tclick2);
 	sel.mode = SEL_IDLE;
+	sel.snap = 0;
 	sel.ob.x = -1;
 	sel.primary = NULL;
 	sel.clipboard = NULL;
 	sel.xtarget = XInternAtom(xw.dpy, "UTF8_STRING", 0);
-	if(sel.xtarget == None)
+	if (sel.xtarget == None)
 		sel.xtarget = XA_STRING;
 }
 
 int
-x2col(int x) {
+x2col(int x)
+{
 	x -= borderpx;
 	x /= xw.cw;
 
@@ -687,7 +734,8 @@
 }
 
 int
-y2row(int y) {
+y2row(int y)
+{
 	y -= borderpx;
 	y /= xw.ch;
 
@@ -695,23 +743,25 @@
 }
 
 int
-tlinelen(int y) {
+tlinelen(int y)
+{
 	int i = term.col;
 
-	if(term.line[y][i - 1].mode & ATTR_WRAP)
+	if (TLINE(y)[i - 1].mode & ATTR_WRAP)
 		return i;
 
-	while(i > 0 && term.line[y][i - 1].u == ' ')
+	while (i > 0 && TLINE(y)[i - 1].u == ' ')
 		--i;
 
 	return i;
 }
 
 void
-selnormalize(void) {
+selnormalize(void)
+{
 	int i;
 
-	if(sel.type == SEL_REGULAR && sel.ob.y != sel.oe.y) {
+	if (sel.type == SEL_REGULAR && sel.ob.y != sel.oe.y) {
 		sel.nb.x = sel.ob.y < sel.oe.y ? sel.ob.x : sel.oe.x;
 		sel.ne.x = sel.ob.y < sel.oe.y ? sel.oe.x : sel.ob.x;
 	} else {
@@ -734,12 +784,13 @@
 		sel.ne.x = term.col - 1;
 }
 
-bool
-selected(int x, int y) {
-	if(sel.mode == SEL_EMPTY)
-		return false;
+int
+selected(int x, int y)
+{
+	if (sel.mode == SEL_EMPTY)
+		return 0;
 
-	if(sel.type == SEL_RECTANGULAR)
+	if (sel.type == SEL_RECTANGULAR)
 		return BETWEEN(y, sel.nb.y, sel.ne.y)
 		    && BETWEEN(x, sel.nb.x, sel.ne.x);
 
@@ -749,42 +800,43 @@
 }
 
 void
-selsnap(int *x, int *y, int direction) {
+selsnap(int *x, int *y, int direction)
+{
 	int newx, newy, xt, yt;
-	bool delim, prevdelim;
+	int delim, prevdelim;
 	Glyph *gp, *prevgp;
 
-	switch(sel.snap) {
+	switch (sel.snap) {
 	case SNAP_WORD:
 		/*
 		 * Snap around if the word wraps around at the end or
 		 * beginning of a line.
 		 */
-		prevgp = &term.line[*y][*x];
+		prevgp = &TLINE(*y)[*x];
 		prevdelim = ISDELIM(prevgp->u);
-		for(;;) {
+		for (;;) {
 			newx = *x + direction;
 			newy = *y;
-			if(!BETWEEN(newx, 0, term.col - 1)) {
+			if (!BETWEEN(newx, 0, term.col - 1)) {
 				newy += direction;
 				newx = (newx + term.col) % term.col;
 				if (!BETWEEN(newy, 0, term.row - 1))
 					break;
 
-				if(direction > 0)
+				if (direction > 0)
 					yt = *y, xt = *x;
 				else
 					yt = newy, xt = newx;
-				if(!(term.line[yt][xt].mode & ATTR_WRAP))
+				if (!(TLINE(yt)[xt].mode & ATTR_WRAP))
 					break;
 			}
 
 			if (newx >= tlinelen(newy))
 				break;
 
-			gp = &term.line[newy][newx];
+			gp = &TLINE(newy)[newx];
 			delim = ISDELIM(gp->u);
-			if(!(gp->mode & ATTR_WDUMMY) && (delim != prevdelim
+			if (!(gp->mode & ATTR_WDUMMY) && (delim != prevdelim
 					|| (delim && gp->u != prevgp->u)))
 				break;
 
@@ -801,16 +853,16 @@
 		 * previous line will be selected.
 		 */
 		*x = (direction < 0) ? 0 : term.col - 1;
-		if(direction < 0) {
-			for(; *y > 0; *y += direction) {
-				if(!(term.line[*y-1][term.col-1].mode
+		if (direction < 0) {
+			for (; *y > 0; *y += direction) {
+				if (!(TLINE(*y-1)[term.col-1].mode
 						& ATTR_WRAP)) {
 					break;
 				}
 			}
-		} else if(direction > 0) {
-			for(; *y < term.row-1; *y += direction) {
-				if(!(term.line[*y][term.col-1].mode
+		} else if (direction > 0) {
+			for (; *y < term.row-1; *y += direction) {
+				if (!(TLINE(*y)[term.col-1].mode
 						& ATTR_WRAP)) {
 					break;
 				}
@@ -821,7 +873,8 @@
 }
 
 void
-getbuttoninfo(XEvent *e) {
+getbuttoninfo(XEvent *e)
+{
 	int type;
 	uint state = e->xbutton.state & ~(Button1Mask | forceselmod);
 
@@ -832,8 +885,8 @@
 	selnormalize();
 
 	sel.type = SEL_REGULAR;
-	for(type = 1; type < LEN(selmasks); ++type) {
-		if(match(selmasks[type], state)) {
+	for (type = 1; type < LEN(selmasks); ++type) {
+		if (match(selmasks[type], state)) {
 			sel.type = type;
 			break;
 		}
@@ -841,7 +894,8 @@
 }
 
 void
-mousereport(XEvent *e) {
+mousereport(XEvent *e)
+{
 	int x = x2col(e->xbutton.x), y = y2row(e->xbutton.y),
 	    button = e->xbutton.button, state = e->xbutton.state,
 	    len;
@@ -849,51 +903,51 @@
 	static int ox, oy;
 
 	/* from urxvt */
-	if(e->xbutton.type == MotionNotify) {
-		if(x == ox && y == oy)
+	if (e->xbutton.type == MotionNotify) {
+		if (x == ox && y == oy)
 			return;
-		if(!IS_SET(MODE_MOUSEMOTION) && !IS_SET(MODE_MOUSEMANY))
+		if (!IS_SET(MODE_MOUSEMOTION) && !IS_SET(MODE_MOUSEMANY))
 			return;
 		/* MOUSE_MOTION: no reporting if no button is pressed */
-		if(IS_SET(MODE_MOUSEMOTION) && oldbutton == 3)
+		if (IS_SET(MODE_MOUSEMOTION) && oldbutton == 3)
 			return;
 
 		button = oldbutton + 32;
 		ox = x;
 		oy = y;
 	} else {
-		if(!IS_SET(MODE_MOUSESGR) && e->xbutton.type == ButtonRelease) {
+		if (!IS_SET(MODE_MOUSESGR) && e->xbutton.type == ButtonRelease) {
 			button = 3;
 		} else {
 			button -= Button1;
-			if(button >= 3)
+			if (button >= 3)
 				button += 64 - 3;
 		}
-		if(e->xbutton.type == ButtonPress) {
+		if (e->xbutton.type == ButtonPress) {
 			oldbutton = button;
 			ox = x;
 			oy = y;
-		} else if(e->xbutton.type == ButtonRelease) {
+		} else if (e->xbutton.type == ButtonRelease) {
 			oldbutton = 3;
 			/* MODE_MOUSEX10: no button release reporting */
-			if(IS_SET(MODE_MOUSEX10))
+			if (IS_SET(MODE_MOUSEX10))
 				return;
 			if (button == 64 || button == 65)
 				return;
 		}
 	}
 
-	if(!IS_SET(MODE_MOUSEX10)) {
+	if (!IS_SET(MODE_MOUSEX10)) {
 		button += ((state & ShiftMask  ) ? 4  : 0)
 			+ ((state & Mod4Mask   ) ? 8  : 0)
 			+ ((state & ControlMask) ? 16 : 0);
 	}
 
-	if(IS_SET(MODE_MOUSESGR)) {
+	if (IS_SET(MODE_MOUSESGR)) {
 		len = snprintf(buf, sizeof(buf), "\033[<%d;%d;%d%c",
 				button, x+1, y+1,
 				e->xbutton.type == ButtonRelease ? 'm' : 'M');
-	} else if(x < 223 && y < 223) {
+	} else if (x < 223 && y < 223) {
 		len = snprintf(buf, sizeof(buf), "\033[M%c%c%c",
 				32+button, 32+x+1, 32+y+1);
 	} else {
@@ -904,24 +958,34 @@
 }
 
 void
-bpress(XEvent *e) {
+bpress(XEvent *e)
+{
 	struct timespec now;
 	Mousekey *mk;
+	MouseShortcut *ms;
 
-	if(IS_SET(MODE_MOUSE) && !(e->xbutton.state & forceselmod)) {
+	if (IS_SET(MODE_MOUSE) && !(e->xbutton.state & forceselmod)) {
 		mousereport(e);
 		return;
 	}
 
-	for(mk = mshortcuts; mk < mshortcuts + LEN(mshortcuts); mk++) {
-		if(e->xbutton.button == mk->b
+	for (mk = mkeys; mk < mkeys + LEN(mkeys); mk++) {
+		if (e->xbutton.button == mk->b
 				&& match(mk->mask, e->xbutton.state)) {
 			ttysend(mk->s, strlen(mk->s));
 			return;
 		}
 	}
 
-	if(e->xbutton.button == Button1) {
+	for (ms = mshortcuts; ms < mshortcuts + LEN(mshortcuts); ms++) {
+		if (e->xbutton.button == ms->b
+				&& match(ms->mask, e->xbutton.state)) {
+			ms->func(&ms->arg);
+			return;
+		}
+	}
+
+	if (e->xbutton.button == Button1) {
 		clock_gettime(CLOCK_MONOTONIC, &now);
 
 		/* Clear previous selection, logically and visually. */
@@ -935,16 +999,16 @@
 		 * If the user clicks below predefined timeouts specific
 		 * snapping behaviour is exposed.
 		 */
-		if(TIMEDIFF(now, sel.tclick2) <= tripleclicktimeout) {
+		if (TIMEDIFF(now, sel.tclick2) <= tripleclicktimeout) {
 			sel.snap = SNAP_LINE;
-		} else if(TIMEDIFF(now, sel.tclick1) <= doubleclicktimeout) {
+		} else if (TIMEDIFF(now, sel.tclick1) <= doubleclicktimeout) {
 			sel.snap = SNAP_WORD;
 		} else {
 			sel.snap = 0;
 		}
 		selnormalize();
 
-		if(sel.snap != 0)
+		if (sel.snap != 0)
 			sel.mode = SEL_READY;
 		tsetdirt(sel.nb.y, sel.ne.y);
 		sel.tclick2 = sel.tclick1;
@@ -953,34 +1017,38 @@
 }
 
 char *
-getsel(void) {
+getsel(void)
+{
 	char *str, *ptr;
 	int y, bufsize, lastx, linelen;
 	Glyph *gp, *last;
 
-	if(sel.ob.x == -1)
+	if (sel.ob.x == -1)
 		return NULL;
 
 	bufsize = (term.col+1) * (sel.ne.y-sel.nb.y+1) * UTF_SIZ;
 	ptr = str = xmalloc(bufsize);
 
 	/* append every set & selected glyph to the selection */
-	for(y = sel.nb.y; y <= sel.ne.y; y++) {
-		linelen = tlinelen(y);
+	for (y = sel.nb.y; y <= sel.ne.y; y++) {
+		if ((linelen = tlinelen(y)) == 0) {
+			*ptr++ = '\n';
+			continue;
+		}
 
-		if(sel.type == SEL_RECTANGULAR) {
-			gp = &term.line[y][sel.nb.x];
+		if (sel.type == SEL_RECTANGULAR) {
+			gp = &TLINE(y)[sel.nb.x];
 			lastx = sel.ne.x;
 		} else {
-			gp = &term.line[y][sel.nb.y == y ? sel.nb.x : 0];
+			gp = &TLINE(y)[sel.nb.y == y ? sel.nb.x : 0];
 			lastx = (sel.ne.y == y) ? sel.ne.x : term.col-1;
 		}
-		last = &term.line[y][MIN(lastx, linelen-1)];
-		while(last >= gp && last->u == ' ')
+		last = &TLINE(y)[MIN(lastx, linelen-1)];
+		while (last >= gp && last->u == ' ')
 			--last;
 
-		for( ; gp <= last; ++gp) {
-			if(gp->mode & ATTR_WDUMMY)
+		for ( ; gp <= last; ++gp) {
+			if (gp->mode & ATTR_WDUMMY)
 				continue;
 
 			ptr += utf8encode(gp->u, ptr);
@@ -995,7 +1063,7 @@
 		 * st.
 		 * FIXME: Fix the computer world.
 		 */
-		if((y < sel.ne.y || lastx >= linelen) && !(last->mode & ATTR_WRAP))
+		if ((y < sel.ne.y || lastx >= linelen) && !(last->mode & ATTR_WRAP))
 			*ptr++ = '\n';
 	}
 	*ptr = 0;
@@ -1003,24 +1071,48 @@
 }
 
 void
-selcopy(Time t) {
+selcopy(Time t)
+{
 	xsetsel(getsel(), t);
 }
 
 void
-selnotify(XEvent *e) {
+propnotify(XEvent *e)
+{
+	XPropertyEvent *xpev;
+	Atom clipboard = XInternAtom(xw.dpy, "CLIPBOARD", 0);
+
+	xpev = &e->xproperty;
+	if (xpev->state == PropertyNewValue &&
+			(xpev->atom == XA_PRIMARY ||
+			 xpev->atom == clipboard)) {
+		selnotify(e);
+	}
+}
+
+void
+selnotify(XEvent *e)
+{
 	ulong nitems, ofs, rem;
 	int format;
 	uchar *data, *last, *repl;
-	Atom type;
-	XSelectionEvent *xsev;
+	Atom type, incratom, property;
+
+	incratom = XInternAtom(xw.dpy, "INCR", 0);
 
 	ofs = 0;
-	xsev = &e->xselection;
-	if (xsev->property == None)
-	    return;
+	if (e->type == SelectionNotify) {
+		property = e->xselection.property;
+	} else if(e->type == PropertyNotify) {
+		property = e->xproperty.atom;
+	} else {
+		return;
+	}
+	if (property == None)
+		return;
+
 	do {
-		if(XGetWindowProperty(xw.dpy, xw.win, xsev->property, ofs,
+		if (XGetWindowProperty(xw.dpy, xw.win, property, ofs,
 					BUFSIZ/4, False, AnyPropertyType,
 					&type, &format, &nitems, &rem,
 					&data)) {
@@ -1028,6 +1120,35 @@
 			return;
 		}
 
+		if (e->type == PropertyNotify && nitems == 0 && rem == 0) {
+			/*
+			 * If there is some PropertyNotify with no data, then
+			 * this is the signal of the selection owner that all
+			 * data has been transferred. We won't need to receive
+			 * PropertyNotify events anymore.
+			 */
+			MODBIT(xw.attrs.event_mask, 0, PropertyChangeMask);
+			XChangeWindowAttributes(xw.dpy, xw.win, CWEventMask,
+					&xw.attrs);
+		}
+
+		if (type == incratom) {
+			/*
+			 * Activate the PropertyNotify events so we receive
+			 * when the selection owner does send us the next
+			 * chunk of data.
+			 */
+			MODBIT(xw.attrs.event_mask, 1, PropertyChangeMask);
+			XChangeWindowAttributes(xw.dpy, xw.win, CWEventMask,
+					&xw.attrs);
+
+			/*
+			 * Deleting the property is the transfer start signal.
+			 */
+			XDeleteProperty(xw.dpy, xw.win, (int)property);
+			continue;
+		}
+
 		/*
 		 * As seen in getsel:
 		 * Line endings are inconsistent in the terminal and GUI world
@@ -1037,35 +1158,44 @@
 		 */
 		repl = data;
 		last = data + nitems * format / 8;
-		while((repl = memchr(repl, '\n', last - repl))) {
+		while ((repl = memchr(repl, '\n', last - repl))) {
 			*repl++ = '\r';
 		}
 
-		if(IS_SET(MODE_BRCKTPASTE))
+		if (IS_SET(MODE_BRCKTPASTE) && ofs == 0)
 			ttywrite("\033[200~", 6);
 		ttysend((char *)data, nitems * format / 8);
-		if(IS_SET(MODE_BRCKTPASTE))
+		if (IS_SET(MODE_BRCKTPASTE) && rem == 0)
 			ttywrite("\033[201~", 6);
 		XFree(data);
 		/* number of 32-bit chunks returned */
 		ofs += nitems * format / 32;
-	} while(rem > 0);
+	} while (rem > 0);
+
+	/*
+	 * Deleting the property again tells the selection owner to send the
+	 * next data chunk in the property.
+	 */
+	if (e->type == PropertyNotify)
+		XDeleteProperty(xw.dpy, xw.win, (int)property);
 }
 
 void
-selpaste(const Arg *dummy) {
+selpaste(const Arg *dummy)
+{
 	XConvertSelection(xw.dpy, XA_PRIMARY, sel.xtarget, XA_PRIMARY,
 			xw.win, CurrentTime);
 }
 
 void
-clipcopy(const Arg *dummy) {
+clipcopy(const Arg *dummy)
+{
 	Atom clipboard;
 
-	if(sel.clipboard != NULL)
+	if (sel.clipboard != NULL)
 		free(sel.clipboard);
 
-	if(sel.primary != NULL) {
+	if (sel.primary != NULL) {
 		sel.clipboard = xstrdup(sel.primary);
 		clipboard = XInternAtom(xw.dpy, "CLIPBOARD", 0);
 		XSetSelectionOwner(xw.dpy, clipboard, xw.win, CurrentTime);
@@ -1073,7 +1203,8 @@
 }
 
 void
-clippaste(const Arg *dummy) {
+clippaste(const Arg *dummy)
+{
 	Atom clipboard;
 
 	clipboard = XInternAtom(xw.dpy, "CLIPBOARD", 0);
@@ -1082,8 +1213,9 @@
 }
 
 void
-selclear(XEvent *e) {
-	if(sel.ob.x == -1)
+selclear(XEvent *e)
+{
+	if (sel.ob.x == -1)
 		return;
 	sel.mode = SEL_IDLE;
 	sel.ob.x = -1;
@@ -1091,7 +1223,8 @@
 }
 
 void
-selrequest(XEvent *e) {
+selrequest(XEvent *e)
+{
 	XSelectionRequestEvent *xsre;
 	XSelectionEvent xev;
 	Atom xa_targets, string, clipboard;
@@ -1110,22 +1243,22 @@
 	xev.property = None;
 
 	xa_targets = XInternAtom(xw.dpy, "TARGETS", 0);
-	if(xsre->target == xa_targets) {
+	if (xsre->target == xa_targets) {
 		/* respond with the supported type */
 		string = sel.xtarget;
 		XChangeProperty(xsre->display, xsre->requestor, xsre->property,
 				XA_ATOM, 32, PropModeReplace,
 				(uchar *) &string, 1);
 		xev.property = xsre->property;
-	} else if(xsre->target == sel.xtarget || xsre->target == XA_STRING) {
+	} else if (xsre->target == sel.xtarget || xsre->target == XA_STRING) {
 		/*
 		 * xith XA_STRING non ascii characters may be incorrect in the
 		 * requestor. It is not our problem, use utf8.
 		 */
 		clipboard = XInternAtom(xw.dpy, "CLIPBOARD", 0);
-		if(xsre->selection == XA_PRIMARY) {
+		if (xsre->selection == XA_PRIMARY) {
 			seltext = sel.primary;
-		} else if(xsre->selection == clipboard) {
+		} else if (xsre->selection == clipboard) {
 			seltext = sel.clipboard;
 		} else {
 			fprintf(stderr,
@@ -1133,7 +1266,7 @@
 				xsre->selection);
 			return;
 		}
-		if(seltext != NULL) {
+		if (seltext != NULL) {
 			XChangeProperty(xsre->display, xsre->requestor,
 					xsre->property, xsre->target,
 					8, PropModeReplace,
@@ -1143,12 +1276,13 @@
 	}
 
 	/* all done, send a notification to the listener */
-	if(!XSendEvent(xsre->display, xsre->requestor, True, 0, (XEvent *) &xev))
+	if (!XSendEvent(xsre->display, xsre->requestor, 1, 0, (XEvent *) &xev))
 		fprintf(stderr, "Error sending SelectionNotify event\n");
 }
 
 void
-xsetsel(char *str, Time t) {
+xsetsel(char *str, Time t)
+{
 	free(sel.primary);
 	sel.primary = str;
 
@@ -1158,16 +1292,17 @@
 }
 
 void
-brelease(XEvent *e) {
-	if(IS_SET(MODE_MOUSE) && !(e->xbutton.state & forceselmod)) {
+brelease(XEvent *e)
+{
+	if (IS_SET(MODE_MOUSE) && !(e->xbutton.state & forceselmod)) {
 		mousereport(e);
 		return;
 	}
 
-	if(e->xbutton.button == Button2) {
+	if (e->xbutton.button == Button2) {
 		selpaste(NULL);
-	} else if(e->xbutton.button == Button1) {
-		if(sel.mode == SEL_READY) {
+	} else if (e->xbutton.button == Button1) {
+		if (sel.mode == SEL_READY) {
 			getbuttoninfo(e);
 			selcopy(e->xbutton.time);
 		} else
@@ -1178,15 +1313,16 @@
 }
 
 void
-bmotion(XEvent *e) {
+bmotion(XEvent *e)
+{
 	int oldey, oldex, oldsby, oldsey;
 
-	if(IS_SET(MODE_MOUSE) && !(e->xbutton.state & forceselmod)) {
+	if (IS_SET(MODE_MOUSE) && !(e->xbutton.state & forceselmod)) {
 		mousereport(e);
 		return;
 	}
 
-	if(!sel.mode)
+	if (!sel.mode)
 		return;
 
 	sel.mode = SEL_READY;
@@ -1196,41 +1332,42 @@
 	oldsey = sel.ne.y;
 	getbuttoninfo(e);
 
-	if(oldey != sel.oe.y || oldex != sel.oe.x)
+	if (oldey != sel.oe.y || oldex != sel.oe.x)
 		tsetdirt(MIN(sel.nb.y, oldsby), MAX(sel.ne.y, oldsey));
 }
 
 void
-die(const char *errstr, ...) {
+die(const char *errstr, ...)
+{
 	va_list ap;
 
 	va_start(ap, errstr);
 	vfprintf(stderr, errstr, ap);
 	va_end(ap);
-	exit(EXIT_FAILURE);
+	exit(1);
 }
 
 void
-execsh(void) {
+execsh(void)
+{
 	char **args, *sh, *prog;
 	const struct passwd *pw;
 	char buf[sizeof(long) * 8 + 1];
 
 	errno = 0;
-	if((pw = getpwuid(getuid())) == NULL) {
-		if(errno)
+	if ((pw = getpwuid(getuid())) == NULL) {
+		if (errno)
 			die("getpwuid:%s\n", strerror(errno));
 		else
 			die("who are you?\n");
 	}
 
-	if (!(sh = getenv("SHELL"))) {
+	if ((sh = getenv("SHELL")) == NULL)
 		sh = (pw->pw_shell[0]) ? pw->pw_shell : shell;
-	}
 
-	if(opt_cmd)
+	if (opt_cmd)
 		prog = opt_cmd[0];
-	else if(utmp)
+	else if (utmp)
 		prog = utmp;
 	else
 		prog = sh;
@@ -1256,24 +1393,24 @@
 	signal(SIGALRM, SIG_DFL);
 
 	execvp(prog, args);
-	_exit(EXIT_FAILURE);
+	_exit(1);
 }
 
 void
-sigchld(int a) {
-	int stat, ret;
+sigchld(int a)
+{
+	int stat;
 	pid_t p;
 
-	if((p = waitpid(pid, &stat, WNOHANG)) < 0)
+	if ((p = waitpid(pid, &stat, WNOHANG)) < 0)
 		die("Waiting for pid %hd failed: %s\n", pid, strerror(errno));
 
-	if(pid != p)
+	if (pid != p)
 		return;
 
-	ret = WIFEXITED(stat) ? WEXITSTATUS(stat) : EXIT_FAILURE;
-	if (ret != EXIT_SUCCESS)
+	if (!WIFEXITED(stat) || WEXITSTATUS(stat))
 		die("child finished with error '%d'\n", stat);
-	exit(EXIT_SUCCESS);
+	exit(0);
 }
 
 
@@ -1283,13 +1420,13 @@
 	char cmd[_POSIX_ARG_MAX], **p, *q, *s;
 	size_t n, siz;
 
-	if((n = strlen(stty_args)) > sizeof(cmd)-1)
+	if ((n = strlen(stty_args)) > sizeof(cmd)-1)
 		die("incorrect stty parameters\n");
 	memcpy(cmd, stty_args, n);
 	q = cmd + n;
 	siz = sizeof(cmd) - n;
-	for(p = opt_cmd; p && (s = *p); ++p) {
-		if((n = strlen(s)) > siz-1)
+	for (p = opt_cmd; p && (s = *p); ++p) {
+		if ((n = strlen(s)) > siz-1)
 			die("stty parameter length too long\n");
 		*q++ = ' ';
 		q = memcpy(q, s, n);
@@ -1302,45 +1439,44 @@
 }
 
 void
-ttynew(void) {
+ttynew(void)
+{
 	int m, s;
 	struct winsize w = {term.row, term.col, 0, 0};
 
-	if(opt_io) {
+	if (opt_io) {
 		term.mode |= MODE_PRINT;
 		iofd = (!strcmp(opt_io, "-")) ?
-			  STDOUT_FILENO :
-			  open(opt_io, O_WRONLY | O_CREAT, 0666);
-		if(iofd < 0) {
+			  1 : open(opt_io, O_WRONLY | O_CREAT, 0666);
+		if (iofd < 0) {
 			fprintf(stderr, "Error opening %s:%s\n",
 				opt_io, strerror(errno));
 		}
 	}
 
 	if (opt_line) {
-		if((cmdfd = open(opt_line, O_RDWR)) < 0)
+		if ((cmdfd = open(opt_line, O_RDWR)) < 0)
 			die("open line failed: %s\n", strerror(errno));
-		close(STDIN_FILENO);
-		dup(cmdfd);
+		dup2(cmdfd, 0);
 		stty();
 		return;
 	}
 
 	/* seems to work fine on linux, openbsd and freebsd */
-	if(openpty(&m, &s, NULL, NULL, &w) < 0)
+	if (openpty(&m, &s, NULL, NULL, &w) < 0)
 		die("openpty failed: %s\n", strerror(errno));
 
-	switch(pid = fork()) {
+	switch (pid = fork()) {
 	case -1:
 		die("fork failed\n");
 		break;
 	case 0:
 		close(iofd);
 		setsid(); /* create a new process group */
-		dup2(s, STDIN_FILENO);
-		dup2(s, STDOUT_FILENO);
-		dup2(s, STDERR_FILENO);
-		if(ioctl(s, TIOCSCTTY, NULL) < 0)
+		dup2(s, 0);
+		dup2(s, 1);
+		dup2(s, 2);
+		if (ioctl(s, TIOCSCTTY, NULL) < 0)
 			die("ioctl TIOCSCTTY failed: %s\n", strerror(errno));
 		close(s);
 		close(m);
@@ -1355,7 +1491,8 @@
 }
 
 void
-ttyread(void) {
+ttyread(void)
+{
 	static char buf[BUFSIZ];
 	static int buflen = 0;
 	char *ptr;
@@ -1364,13 +1501,13 @@
 	int ret;
 
 	/* append read bytes to unprocessed bytes */
-	if((ret = read(cmdfd, buf+buflen, LEN(buf)-buflen)) < 0)
+	if ((ret = read(cmdfd, buf+buflen, LEN(buf)-buflen)) < 0)
 		die("Couldn't read from shell: %s\n", strerror(errno));
 
 	/* process every complete utf8 char */
 	buflen += ret;
 	ptr = buf;
-	while((charsize = utf8decode(ptr, &unicodep, buflen))) {
+	while ((charsize = utf8decode(ptr, &unicodep, buflen))) {
 		tputc(unicodep);
 		ptr += charsize;
 		buflen -= charsize;
@@ -1378,22 +1515,79 @@
 
 	/* keep any uncomplete utf8 char for the next call */
 	memmove(buf, ptr, buflen);
+	if (term.scr > 0 && term.scr < histsize-1)
+		term.scr++;
 }
 
 void
-ttywrite(const char *s, size_t n) {
-	if(xwrite(cmdfd, s, n) == -1)
-		die("write error on tty: %s\n", strerror(errno));
+ttywrite(const char *s, size_t n)
+{
+	fd_set wfd;
+	struct timespec tv;
+	ssize_t r;
+	Arg arg = (Arg){ .i = term.scr };
+
+	kscrolldown(&arg);
+
+	/*
+	 * Remember that we are using a pty, which might be a modem line.
+	 * Writing too much will clog the line. That's why we are doing this
+	 * dance.
+	 * FIXME: Migrate the world to Plan 9.
+	 */
+	while (n > 0) {
+		FD_ZERO(&wfd);
+		FD_SET(cmdfd, &wfd);
+		tv.tv_sec = 0;
+		tv.tv_nsec = 0;
+
+		/* Check if we can write. */
+		if (pselect(cmdfd+1, NULL, &wfd, NULL, &tv, NULL) < 0) {
+			if (errno == EINTR)
+				continue;
+			die("select failed: %s\n", strerror(errno));
+		}
+		if(!FD_ISSET(cmdfd, &wfd)) {
+			/* No, then free some buffer space. */
+			ttyread();
+		} else {
+			/*
+			 * Only write 256 bytes at maximum. This seems to be a
+			 * reasonable value for a serial line. Bigger values
+			 * might clog the I/O.
+			 */
+			r = write(cmdfd, s, (n < 256)? n : 256);
+			if (r < 0) {
+				die("write error on tty: %s\n",
+						strerror(errno));
+			}
+			if (r < n) {
+				/*
+				 * We weren't able to write out everything.
+				 * This means the buffer is getting full
+				 * again. Empty it.
+				 */
+				if (n < 256)
+					ttyread();
+				n -= r;
+				s += r;
+			} else {
+				/* All bytes have been written. */
+				break;
+			}
+		}
+	}
 }
 
 void
-ttysend(char *s, size_t n) {
+ttysend(char *s, size_t n)
+{
 	int len;
 	Rune u;
 
 	ttywrite(s, n);
-	if(IS_SET(MODE_ECHO))
-		while((len = utf8decode(s, &u, n)) > 0) {
+	if (IS_SET(MODE_ECHO))
+		while ((len = utf8decode(s, &u, n)) > 0) {
 			techo(u);
 			n -= len;
 			s += len;
@@ -1401,24 +1595,26 @@
 }
 
 void
-ttyresize(void) {
+ttyresize(void)
+{
 	struct winsize w;
 
 	w.ws_row = term.row;
 	w.ws_col = term.col;
 	w.ws_xpixel = xw.tw;
 	w.ws_ypixel = xw.th;
-	if(ioctl(cmdfd, TIOCSWINSZ, &w) < 0)
+	if (ioctl(cmdfd, TIOCSWINSZ, &w) < 0)
 		fprintf(stderr, "Couldn't set window size: %s\n", strerror(errno));
 }
 
 int
-tattrset(int attr) {
+tattrset(int attr)
+{
 	int i, j;
 
-	for(i = 0; i < term.row-1; i++) {
-		for(j = 0; j < term.col-1; j++) {
-			if(term.line[i][j].mode & attr)
+	for (i = 0; i < term.row-1; i++) {
+		for (j = 0; j < term.col-1; j++) {
+			if (term.line[i][j].mode & attr)
 				return 1;
 		}
 	}
@@ -1427,23 +1623,25 @@
 }
 
 void
-tsetdirt(int top, int bot) {
+tsetdirt(int top, int bot)
+{
 	int i;
 
 	LIMIT(top, 0, term.row-1);
 	LIMIT(bot, 0, term.row-1);
 
-	for(i = top; i <= bot; i++)
+	for (i = top; i <= bot; i++)
 		term.dirty[i] = 1;
 }
 
 void
-tsetdirtattr(int attr) {
+tsetdirtattr(int attr)
+{
 	int i, j;
 
-	for(i = 0; i < term.row-1; i++) {
-		for(j = 0; j < term.col-1; j++) {
-			if(term.line[i][j].mode & attr) {
+	for (i = 0; i < term.row-1; i++) {
+		for (j = 0; j < term.col-1; j++) {
+			if (term.line[i][j].mode & attr) {
 				tsetdirt(i, i);
 				break;
 			}
@@ -1452,25 +1650,28 @@
 }
 
 void
-tfulldirt(void) {
+tfulldirt(void)
+{
 	tsetdirt(0, term.row-1);
 }
 
 void
-tcursor(int mode) {
+tcursor(int mode)
+{
 	static TCursor c[2];
-	bool alt = IS_SET(MODE_ALTSCREEN);
+	int alt = IS_SET(MODE_ALTSCREEN);
 
-	if(mode == CURSOR_SAVE) {
+	if (mode == CURSOR_SAVE) {
 		c[alt] = term.c;
-	} else if(mode == CURSOR_LOAD) {
+	} else if (mode == CURSOR_LOAD) {
 		term.c = c[alt];
 		tmoveto(c[alt].x, c[alt].y);
 	}
 }
 
 void
-treset(void) {
+treset(void)
+{
 	uint i;
 
 	term.c = (TCursor){{
@@ -1480,7 +1681,7 @@
 	}, .x = 0, .y = 0, .state = CURSOR_DEFAULT};
 
 	memset(term.tabs, 0, term.col * sizeof(*term.tabs));
-	for(i = tabspaces; i < term.col; i += tabspaces)
+	for (i = tabspaces; i < term.col; i += tabspaces)
 		term.tabs[i] = 1;
 	term.top = 0;
 	term.bot = term.row - 1;
@@ -1488,7 +1689,7 @@
 	memset(term.trantbl, CS_USA, sizeof(term.trantbl));
 	term.charset = 0;
 
-	for(i = 0; i < 2; i++) {
+	for (i = 0; i < 2; i++) {
 		tmoveto(0, 0);
 		tcursor(CURSOR_SAVE);
 		tclearregion(0, 0, term.col-1, term.row-1);
@@ -1497,7 +1698,8 @@
 }
 
 void
-tnew(int col, int row) {
+tnew(int col, int row)
+{
 	term = (Term){ .c = { .attr = { .fg = defaultfg, .bg = defaultbg } } };
 	tresize(col, row);
 	term.numlock = 1;
@@ -1506,7 +1708,8 @@
 }
 
 void
-tswapscreen(void) {
+tswapscreen(void)
+{
 	Line *tmp = term.line;
 
 	term.line = term.alt;
@@ -1516,16 +1719,57 @@
 }
 
 void
-tscrolldown(int orig, int n) {
+kscrolldown(const Arg* a)
+{
+	int n = a->i;
+
+	if (n < 0)
+		n = term.row + n;
+
+	if (n > term.scr)
+		n = term.scr;
+
+	if (term.scr > 0) {
+		term.scr -= n;
+		selscroll(0, -n);
+		tfulldirt();
+	}
+}
+
+void
+kscrollup(const Arg* a)
+{
+	int n = a->i;
+
+	if (n < 0)
+		n = term.row + n;
+
+	if (term.scr <= histsize - n) {
+		term.scr += n;
+		selscroll(0, n);
+		tfulldirt();
+	}
+}
+
+void
+tscrolldown(int orig, int n, int copyhist)
+{
 	int i;
 	Line temp;
 
 	LIMIT(n, 0, term.bot-orig+1);
 
+	if (copyhist) {
+		term.histi = (term.histi - 1 + histsize) % histsize;
+		temp = term.hist[term.histi];
+		term.hist[term.histi] = term.line[term.bot];
+		term.line[term.bot] = temp;
+	}
+
 	tsetdirt(orig, term.bot-n);
 	tclearregion(0, term.bot-n+1, term.col-1, term.bot);
 
-	for(i = term.bot; i >= orig+n; i--) {
+	for (i = term.bot; i >= orig+n; i--) {
 		temp = term.line[i];
 		term.line[i] = term.line[i-n];
 		term.line[i-n] = temp;
@@ -1535,16 +1779,24 @@
 }
 
 void
-tscrollup(int orig, int n) {
+tscrollup(int orig, int n, int copyhist)
+{
 	int i;
 	Line temp;
 
 	LIMIT(n, 0, term.bot-orig+1);
 
+	if (copyhist) {
+		term.histi = (term.histi + 1) % histsize;
+		temp = term.hist[term.histi];
+		term.hist[term.histi] = term.line[orig];
+		term.line[orig] = temp;
+	}
+
 	tclearregion(0, orig, term.col-1, orig+n-1);
 	tsetdirt(orig+n, term.bot);
 
-	for(i = orig; i <= term.bot-n; i++) {
+	for (i = orig; i <= term.bot-n; i++) {
 		temp = term.line[i];
 		term.line[i] = term.line[i+n];
 		term.line[i+n] = temp;
@@ -1554,26 +1806,27 @@
 }
 
 void
-selscroll(int orig, int n) {
-	if(sel.ob.x == -1)
+selscroll(int orig, int n)
+{
+	if (sel.ob.x == -1)
 		return;
 
-	if(BETWEEN(sel.ob.y, orig, term.bot) || BETWEEN(sel.oe.y, orig, term.bot)) {
-		if((sel.ob.y += n) > term.bot || (sel.oe.y += n) < term.top) {
+	if (BETWEEN(sel.ob.y, orig, term.bot) || BETWEEN(sel.oe.y, orig, term.bot)) {
+		if ((sel.ob.y += n) > term.bot || (sel.oe.y += n) < term.top) {
 			selclear(NULL);
 			return;
 		}
-		if(sel.type == SEL_RECTANGULAR) {
-			if(sel.ob.y < term.top)
+		if (sel.type == SEL_RECTANGULAR) {
+			if (sel.ob.y < term.top)
 				sel.ob.y = term.top;
-			if(sel.oe.y > term.bot)
+			if (sel.oe.y > term.bot)
 				sel.oe.y = term.bot;
 		} else {
-			if(sel.ob.y < term.top) {
+			if (sel.ob.y < term.top) {
 				sel.ob.y = term.top;
 				sel.ob.x = 0;
 			}
-			if(sel.oe.y > term.bot) {
+			if (sel.oe.y > term.bot) {
 				sel.oe.y = term.bot;
 				sel.oe.x = term.col;
 			}
@@ -1583,11 +1836,12 @@
 }
 
 void
-tnewline(int first_col) {
+tnewline(int first_col)
+{
 	int y = term.c.y;
 
-	if(y == term.bot) {
-		tscrollup(term.top, 1);
+	if (y == term.bot) {
+		tscrollup(term.top, 1, 1);
 	} else {
 		y++;
 	}
@@ -1595,27 +1849,28 @@
 }
 
 void
-csiparse(void) {
+csiparse(void)
+{
 	char *p = csiescseq.buf, *np;
 	long int v;
 
 	csiescseq.narg = 0;
-	if(*p == '?') {
+	if (*p == '?') {
 		csiescseq.priv = 1;
 		p++;
 	}
 
 	csiescseq.buf[csiescseq.len] = '\0';
-	while(p < csiescseq.buf+csiescseq.len) {
+	while (p < csiescseq.buf+csiescseq.len) {
 		np = NULL;
 		v = strtol(p, &np, 10);
-		if(np == p)
+		if (np == p)
 			v = 0;
-		if(v == LONG_MAX || v == LONG_MIN)
+		if (v == LONG_MAX || v == LONG_MIN)
 			v = -1;
 		csiescseq.arg[csiescseq.narg++] = v;
 		p = np;
-		if(*p != ';' || csiescseq.narg == ESC_ARG_SIZ)
+		if (*p != ';' || csiescseq.narg == ESC_ARG_SIZ)
 			break;
 		p++;
 	}
@@ -1625,15 +1880,17 @@
 
 /* for absolute user moves, when decom is set */
 void
-tmoveato(int x, int y) {
+tmoveato(int x, int y)
+{
 	tmoveto(x, y + ((term.c.state & CURSOR_ORIGIN) ? term.top: 0));
 }
 
 void
-tmoveto(int x, int y) {
+tmoveto(int x, int y)
+{
 	int miny, maxy;
 
-	if(term.c.state & CURSOR_ORIGIN) {
+	if (term.c.state & CURSOR_ORIGIN) {
 		miny = term.top;
 		maxy = term.bot;
 	} else {
@@ -1646,7 +1903,8 @@
 }
 
 void
-tsetchar(Rune u, Glyph *attr, int x, int y) {
+tsetchar(Rune u, Glyph *attr, int x, int y)
+{
 	static char *vt100_0[62] = { /* 0x41 - 0x7e */
 		"↑", "↓", "→", "←", "█", "▚", "☃", /* A - G */
 		0, 0, 0, 0, 0, 0, 0, 0, /* H - O */
@@ -1661,16 +1919,16 @@
 	/*
 	 * The table is proudly stolen from rxvt.
 	 */
-	if(term.trantbl[term.charset] == CS_GRAPHIC0 &&
+	if (term.trantbl[term.charset] == CS_GRAPHIC0 &&
 	   BETWEEN(u, 0x41, 0x7e) && vt100_0[u - 0x41])
 		utf8decode(vt100_0[u - 0x41], &u, UTF_SIZ);
 
-	if(term.line[y][x].mode & ATTR_WIDE) {
-		if(x+1 < term.col) {
+	if (term.line[y][x].mode & ATTR_WIDE) {
+		if (x+1 < term.col) {
 			term.line[y][x+1].u = ' ';
 			term.line[y][x+1].mode &= ~ATTR_WDUMMY;
 		}
-	} else if(term.line[y][x].mode & ATTR_WDUMMY) {
+	} else if (term.line[y][x].mode & ATTR_WDUMMY) {
 		term.line[y][x-1].u = ' ';
 		term.line[y][x-1].mode &= ~ATTR_WIDE;
 	}
@@ -1681,13 +1939,14 @@
 }
 
 void
-tclearregion(int x1, int y1, int x2, int y2) {
+tclearregion(int x1, int y1, int x2, int y2)
+{
 	int x, y, temp;
 	Glyph *gp;
 
-	if(x1 > x2)
+	if (x1 > x2)
 		temp = x1, x1 = x2, x2 = temp;
-	if(y1 > y2)
+	if (y1 > y2)
 		temp = y1, y1 = y2, y2 = temp;
 
 	LIMIT(x1, 0, term.col-1);
@@ -1695,11 +1954,11 @@
 	LIMIT(y1, 0, term.row-1);
 	LIMIT(y2, 0, term.row-1);
 
-	for(y = y1; y <= y2; y++) {
+	for (y = y1; y <= y2; y++) {
 		term.dirty[y] = 1;
-		for(x = x1; x <= x2; x++) {
+		for (x = x1; x <= x2; x++) {
 			gp = &term.line[y][x];
-			if(selected(x, y))
+			if (selected(x, y))
 				selclear(NULL);
 			gp->fg = term.c.attr.fg;
 			gp->bg = term.c.attr.bg;
@@ -1710,7 +1969,8 @@
 }
 
 void
-tdeletechar(int n) {
+tdeletechar(int n)
+{
 	int dst, src, size;
 	Glyph *line;
 
@@ -1726,7 +1986,8 @@
 }
 
 void
-tinsertblank(int n) {
+tinsertblank(int n)
+{
 	int dst, src, size;
 	Glyph *line;
 
@@ -1742,19 +2003,22 @@
 }
 
 void
-tinsertblankline(int n) {
-	if(BETWEEN(term.c.y, term.top, term.bot))
-		tscrolldown(term.c.y, n);
+tinsertblankline(int n)
+{
+	if (BETWEEN(term.c.y, term.top, term.bot))
+		tscrolldown(term.c.y, n, 0);
 }
 
 void
-tdeleteline(int n) {
-	if(BETWEEN(term.c.y, term.top, term.bot))
-		tscrollup(term.c.y, n);
+tdeleteline(int n)
+{
+	if (BETWEEN(term.c.y, term.top, term.bot))
+		tscrollup(term.c.y, n, 0);
 }
 
 int32_t
-tdefcolor(int *attr, int *npar, int l) {
+tdefcolor(int *attr, int *npar, int l)
+{
 	int32_t idx = -1;
 	uint r, g, b;
 
@@ -1770,7 +2034,7 @@
 		g = attr[*npar + 3];
 		b = attr[*npar + 4];
 		*npar += 4;
-		if(!BETWEEN(r, 0, 255) || !BETWEEN(g, 0, 255) || !BETWEEN(b, 0, 255))
+		if (!BETWEEN(r, 0, 255) || !BETWEEN(g, 0, 255) || !BETWEEN(b, 0, 255))
 			fprintf(stderr, "erresc: bad rgb color (%u,%u,%u)\n",
 				r, g, b);
 		else
@@ -1784,7 +2048,7 @@
 			break;
 		}
 		*npar += 2;
-		if(!BETWEEN(attr[*npar], 0, 255))
+		if (!BETWEEN(attr[*npar], 0, 255))
 			fprintf(stderr, "erresc: bad fgcolor %d\n", attr[*npar]);
 		else
 			idx = attr[*npar];
@@ -1803,12 +2067,13 @@
 }
 
 void
-tsetattr(int *attr, int l) {
+tsetattr(int *attr, int l)
+{
 	int i;
 	int32_t idx;
 
-	for(i = 0; i < l; i++) {
-		switch(attr[i]) {
+	for (i = 0; i < l; i++) {
+		switch (attr[i]) {
 		case 0:
 			term.c.attr.mode &= ~(
 				ATTR_BOLD       |
@@ -1884,13 +2149,13 @@
 			term.c.attr.bg = defaultbg;
 			break;
 		default:
-			if(BETWEEN(attr[i], 30, 37)) {
+			if (BETWEEN(attr[i], 30, 37)) {
 				term.c.attr.fg = attr[i] - 30;
-			} else if(BETWEEN(attr[i], 40, 47)) {
+			} else if (BETWEEN(attr[i], 40, 47)) {
 				term.c.attr.bg = attr[i] - 40;
-			} else if(BETWEEN(attr[i], 90, 97)) {
+			} else if (BETWEEN(attr[i], 90, 97)) {
 				term.c.attr.fg = attr[i] - 90 + 8;
-			} else if(BETWEEN(attr[i], 100, 107)) {
+			} else if (BETWEEN(attr[i], 100, 107)) {
 				term.c.attr.bg = attr[i] - 100 + 8;
 			} else {
 				fprintf(stderr,
@@ -1903,12 +2168,13 @@
 }
 
 void
-tsetscroll(int t, int b) {
+tsetscroll(int t, int b)
+{
 	int temp;
 
 	LIMIT(t, 0, term.row-1);
 	LIMIT(b, 0, term.row-1);
-	if(t > b) {
+	if (t > b) {
 		temp = t;
 		t = b;
 		b = temp;
@@ -1918,20 +2184,21 @@
 }
 
 void
-tsetmode(bool priv, bool set, int *args, int narg) {
+tsetmode(int priv, int set, int *args, int narg)
+{
 	int *lim, mode;
-	bool alt;
+	int alt;
 
-	for(lim = args + narg; args < lim; ++args) {
-		if(priv) {
-			switch(*args) {
+	for (lim = args + narg; args < lim; ++args) {
+		if (priv) {
+			switch (*args) {
 			case 1: /* DECCKM -- Cursor key */
 				MODBIT(term.mode, set, MODE_APPCURSOR);
 				break;
 			case 5: /* DECSCNM -- Reverse video */
 				mode = term.mode;
 				MODBIT(term.mode, set, MODE_REVERSE);
-				if(mode != term.mode)
+				if (mode != term.mode)
 					redraw();
 				break;
 			case 6: /* DECOM -- Origin */
@@ -1993,13 +2260,13 @@
 				if (!allowaltscreen)
 					break;
 				alt = IS_SET(MODE_ALTSCREEN);
-				if(alt) {
+				if (alt) {
 					tclearregion(0, 0, term.col-1,
 							term.row-1);
 				}
-				if(set ^ alt) /* set is always 1 or 0 */
+				if (set ^ alt) /* set is always 1 or 0 */
 					tswapscreen();
-				if(*args != 1049)
+				if (*args != 1049)
 					break;
 				/* FALLTHROUGH */
 			case 1048:
@@ -2024,7 +2291,7 @@
 				break;
 			}
 		} else {
-			switch(*args) {
+			switch (*args) {
 			case 0:  /* Error (IGNORED) */
 				break;
 			case 2:  /* KAM -- keyboard action */
@@ -2050,11 +2317,12 @@
 }
 
 void
-csihandle(void) {
+csihandle(void)
+{
 	char buf[40];
 	int len;
 
-	switch(csiescseq.mode[0]) {
+	switch (csiescseq.mode[0]) {
 	default:
 	unknown:
 		fprintf(stderr, "erresc: unknown csi ");
@@ -2075,7 +2343,7 @@
 		tmoveto(term.c.x, term.c.y+csiescseq.arg[0]);
 		break;
 	case 'i': /* MC -- Media Copy */
-		switch(csiescseq.arg[0]) {
+		switch (csiescseq.arg[0]) {
 		case 0:
 			tdump();
 			break;
@@ -2094,7 +2362,7 @@
 		}
 		break;
 	case 'c': /* DA -- Device Attributes */
-		if(csiescseq.arg[0] == 0)
+		if (csiescseq.arg[0] == 0)
 			ttywrite(vtiden, sizeof(vtiden) - 1);
 		break;
 	case 'C': /* CUF -- Cursor <n> Forward */
@@ -2115,7 +2383,7 @@
 		tmoveto(0, term.c.y-csiescseq.arg[0]);
 		break;
 	case 'g': /* TBC -- Tabulation clear */
-		switch(csiescseq.arg[0]) {
+		switch (csiescseq.arg[0]) {
 		case 0: /* clear current tab stop */
 			term.tabs[term.c.x] = 0;
 			break;
@@ -2143,16 +2411,16 @@
 		break;
 	case 'J': /* ED -- Clear screen */
 		selclear(NULL);
-		switch(csiescseq.arg[0]) {
+		switch (csiescseq.arg[0]) {
 		case 0: /* below */
 			tclearregion(term.c.x, term.c.y, term.col-1, term.c.y);
-			if(term.c.y < term.row-1) {
+			if (term.c.y < term.row-1) {
 				tclearregion(0, term.c.y+1, term.col-1,
 						term.row-1);
 			}
 			break;
 		case 1: /* above */
-			if(term.c.y > 1)
+			if (term.c.y > 1)
 				tclearregion(0, 0, term.col-1, term.c.y-1);
 			tclearregion(0, term.c.y, term.c.x, term.c.y);
 			break;
@@ -2164,7 +2432,7 @@
 		}
 		break;
 	case 'K': /* EL -- Clear line */
-		switch(csiescseq.arg[0]) {
+		switch (csiescseq.arg[0]) {
 		case 0: /* right */
 			tclearregion(term.c.x, term.c.y, term.col-1,
 					term.c.y);
@@ -2179,11 +2447,11 @@
 		break;
 	case 'S': /* SU -- Scroll <n> line up */
 		DEFAULT(csiescseq.arg[0], 1);
-		tscrollup(term.top, csiescseq.arg[0]);
+		tscrollup(term.top, csiescseq.arg[0], 0);
 		break;
 	case 'T': /* SD -- Scroll <n> line down */
 		DEFAULT(csiescseq.arg[0], 1);
-		tscrolldown(term.top, csiescseq.arg[0]);
+		tscrolldown(term.top, csiescseq.arg[0], 0);
 		break;
 	case 'L': /* IL -- Insert <n> blank lines */
 		DEFAULT(csiescseq.arg[0], 1);
@@ -2227,7 +2495,7 @@
 		}
 		break;
 	case 'r': /* DECSTBM -- Set Scrolling Region */
-		if(csiescseq.priv) {
+		if (csiescseq.priv) {
 			goto unknown;
 		} else {
 			DEFAULT(csiescseq.arg[0], 1);
@@ -2244,35 +2512,36 @@
 		break;
 	case ' ':
 		switch (csiescseq.mode[1]) {
-			case 'q': /* DECSCUSR -- Set Cursor Style */
-				DEFAULT(csiescseq.arg[0], 1);
-				if (!BETWEEN(csiescseq.arg[0], 0, 6)) {
-					goto unknown;
-				}
-				xw.cursor = csiescseq.arg[0];
-				break;
-			default:
+		case 'q': /* DECSCUSR -- Set Cursor Style */
+			DEFAULT(csiescseq.arg[0], 1);
+			if (!BETWEEN(csiescseq.arg[0], 0, 6)) {
 				goto unknown;
+			}
+			xw.cursor = csiescseq.arg[0];
+			break;
+		default:
+			goto unknown;
 		}
 		break;
 	}
 }
 
 void
-csidump(void) {
+csidump(void)
+{
 	int i;
 	uint c;
 
 	printf("ESC[");
-	for(i = 0; i < csiescseq.len; i++) {
+	for (i = 0; i < csiescseq.len; i++) {
 		c = csiescseq.buf[i] & 0xff;
-		if(isprint(c)) {
+		if (isprint(c)) {
 			putchar(c);
-		} else if(c == '\n') {
+		} else if (c == '\n') {
 			printf("(\\n)");
-		} else if(c == '\r') {
+		} else if (c == '\r') {
 			printf("(\\r)");
-		} else if(c == 0x1b) {
+		} else if (c == 0x1b) {
 			printf("(\\e)");
 		} else {
 			printf("(%02x)", c);
@@ -2282,12 +2551,14 @@
 }
 
 void
-csireset(void) {
+csireset(void)
+{
 	memset(&csiescseq, 0, sizeof(csiescseq));
 }
 
 void
-strhandle(void) {
+strhandle(void)
+{
 	char *p = NULL;
 	int j, narg, par;
 
@@ -2295,23 +2566,23 @@
 	strparse();
 	par = (narg = strescseq.narg) ? atoi(strescseq.args[0]) : 0;
 
-	switch(strescseq.type) {
+	switch (strescseq.type) {
 	case ']': /* OSC -- Operating System Command */
-		switch(par) {
+		switch (par) {
 		case 0:
 		case 1:
 		case 2:
-			if(narg > 1)
+			if (narg > 1)
 				xsettitle(strescseq.args[1]);
 			return;
 		case 4: /* color set */
-			if(narg < 3)
+			if (narg < 3)
 				break;
 			p = strescseq.args[2];
 			/* FALLTHROUGH */
 		case 104: /* color reset, here p = NULL */
 			j = (narg > 1) ? atoi(strescseq.args[1]) : -1;
-			if(xsetcolorname(j, p)) {
+			if (xsetcolorname(j, p)) {
 				fprintf(stderr, "erresc: invalid color %s\n", p);
 			} else {
 				/*
@@ -2337,43 +2608,45 @@
 }
 
 void
-strparse(void) {
+strparse(void)
+{
 	int c;
 	char *p = strescseq.buf;
 
 	strescseq.narg = 0;
 	strescseq.buf[strescseq.len] = '\0';
 
-	if(*p == '\0')
+	if (*p == '\0')
 		return;
 
-	while(strescseq.narg < STR_ARG_SIZ) {
+	while (strescseq.narg < STR_ARG_SIZ) {
 		strescseq.args[strescseq.narg++] = p;
-		while((c = *p) != ';' && c != '\0')
+		while ((c = *p) != ';' && c != '\0')
 			++p;
-		if(c == '\0')
+		if (c == '\0')
 			return;
 		*p++ = '\0';
 	}
 }
 
 void
-strdump(void) {
+strdump(void)
+{
 	int i;
 	uint c;
 
 	printf("ESC%c", strescseq.type);
-	for(i = 0; i < strescseq.len; i++) {
+	for (i = 0; i < strescseq.len; i++) {
 		c = strescseq.buf[i] & 0xff;
-		if(c == '\0') {
+		if (c == '\0') {
 			return;
-		} else if(isprint(c)) {
+		} else if (isprint(c)) {
 			putchar(c);
-		} else if(c == '\n') {
+		} else if (c == '\n') {
 			printf("(\\n)");
-		} else if(c == '\r') {
+		} else if (c == '\r') {
 			printf("(\\r)");
-		} else if(c == 0x1b) {
+		} else if (c == 0x1b) {
 			printf("(\\e)");
 		} else {
 			printf("(%02x)", c);
@@ -2383,13 +2656,22 @@
 }
 
 void
-strreset(void) {
+strreset(void)
+{
 	memset(&strescseq, 0, sizeof(strescseq));
 }
 
 void
-tprinter(char *s, size_t len) {
-	if(iofd != -1 && xwrite(iofd, s, len) < 0) {
+sendbreak(const Arg *arg)
+{
+	if (tcsendbreak(cmdfd, 0))
+		perror("Error sending break");
+}
+
+void
+tprinter(char *s, size_t len)
+{
+	if (iofd != -1 && xwrite(iofd, s, len) < 0) {
 		fprintf(stderr, "Error writing in %s:%s\n",
 			opt_io, strerror(errno));
 		close(iofd);
@@ -2398,76 +2680,84 @@
 }
 
 void
-toggleprinter(const Arg *arg) {
+toggleprinter(const Arg *arg)
+{
 	term.mode ^= MODE_PRINT;
 }
 
 void
-printscreen(const Arg *arg) {
+printscreen(const Arg *arg)
+{
 	tdump();
 }
 
 void
-printsel(const Arg *arg) {
+printsel(const Arg *arg)
+{
 	tdumpsel();
 }
 
 void
-tdumpsel(void) {
+tdumpsel(void)
+{
 	char *ptr;
 
-	if((ptr = getsel())) {
+	if ((ptr = getsel())) {
 		tprinter(ptr, strlen(ptr));
 		free(ptr);
 	}
 }
 
 void
-tdumpline(int n) {
+tdumpline(int n)
+{
 	char buf[UTF_SIZ];
 	Glyph *bp, *end;
 
 	bp = &term.line[n][0];
 	end = &bp[MIN(tlinelen(n), term.col) - 1];
-	if(bp != end || bp->u != ' ') {
-		for( ;bp <= end; ++bp)
+	if (bp != end || bp->u != ' ') {
+		for ( ;bp <= end; ++bp)
 			tprinter(buf, utf8encode(bp->u, buf));
 	}
 	tprinter("\n", 1);
 }
 
 void
-tdump(void) {
+tdump(void)
+{
 	int i;
 
-	for(i = 0; i < term.row; ++i)
+	for (i = 0; i < term.row; ++i)
 		tdumpline(i);
 }
 
 void
-tputtab(int n) {
+tputtab(int n)
+{
 	uint x = term.c.x;
 
-	if(n > 0) {
-		while(x < term.col && n--)
-			for(++x; x < term.col && !term.tabs[x]; ++x)
+	if (n > 0) {
+		while (x < term.col && n--)
+			for (++x; x < term.col && !term.tabs[x]; ++x)
 				/* nothing */ ;
-	} else if(n < 0) {
-		while(x > 0 && n++)
-			for(--x; x > 0 && !term.tabs[x]; --x)
+	} else if (n < 0) {
+		while (x > 0 && n++)
+			for (--x; x > 0 && !term.tabs[x]; --x)
 				/* nothing */ ;
 	}
 	term.c.x = LIMIT(x, 0, term.col-1);
 }
 
 void
-techo(Rune u) {
-	if(ISCONTROL(u)) { /* control code */
-		if(u & 0x80) {
+techo(Rune u)
+{
+	if (ISCONTROL(u)) { /* control code */
+		if (u & 0x80) {
 			u &= 0x7f;
 			tputc('^');
 			tputc('[');
-		} else if(u != '\n' && u != '\r' && u != '\t') {
+		} else if (u != '\n' && u != '\r' && u != '\t') {
 			u ^= 0x40;
 			tputc('^');
 		}
@@ -2476,12 +2766,13 @@
 }
 
 void
-tdeftran(char ascii) {
+tdeftran(char ascii)
+{
 	static char cs[] = "0B";
 	static int vcs[] = {CS_GRAPHIC0, CS_USA};
 	char *p;
 
-	if((p = strchr(cs, ascii)) == NULL) {
+	if ((p = strchr(cs, ascii)) == NULL) {
 		fprintf(stderr, "esc unhandled charset: ESC ( %c\n", ascii);
 	} else {
 		term.trantbl[term.icharset] = vcs[p - cs];
@@ -2489,19 +2780,21 @@
 }
 
 void
-tdectest(char c) {
+tdectest(char c)
+{
 	int x, y;
 
-	if(c == '8') { /* DEC screen alignment test. */
-		for(x = 0; x < term.col; ++x) {
-			for(y = 0; y < term.row; ++y)
+	if (c == '8') { /* DEC screen alignment test. */
+		for (x = 0; x < term.col; ++x) {
+			for (y = 0; y < term.row; ++y)
 				tsetchar('E', &term.c.attr, x, y);
 		}
 	}
 }
 
 void
-tstrsequence(uchar c) {
+tstrsequence(uchar c)
+{
 	switch (c) {
 	case 0x90:   /* DCS -- Device Control String */
 		c = 'P';
@@ -2522,8 +2815,9 @@
 }
 
 void
-tcontrolcode(uchar ascii) {
-	switch(ascii) {
+tcontrolcode(uchar ascii)
+{
+	switch (ascii) {
 	case '\t':   /* HT */
 		tputtab(1);
 		return;
@@ -2540,11 +2834,11 @@
 		tnewline(IS_SET(MODE_CRLF));
 		return;
 	case '\a':   /* BEL */
-		if(term.esc & ESC_STR_END) {
+		if (term.esc & ESC_STR_END) {
 			/* backwards compatibility to xterm */
 			strhandle();
 		} else {
-			if(!(xw.state & WIN_FOCUSED))
+			if (!(xw.state & WIN_FOCUSED))
 				xseturgency(1);
 			if (bellvolume)
 				XkbBell(xw.dpy, xw.win, bellvolume, (Atom)NULL);
@@ -2570,18 +2864,37 @@
 	case '\023': /* XOFF (IGNORED) */
 	case 0177:   /* DEL (IGNORED) */
 		return;
+	case 0x80:   /* TODO: PAD */
+	case 0x81:   /* TODO: HOP */
+	case 0x82:   /* TODO: BPH */
+	case 0x83:   /* TODO: NBH */
 	case 0x84:   /* TODO: IND */
 		break;
 	case 0x85:   /* NEL -- Next line */
 		tnewline(1); /* always go to first col */
 		break;
+	case 0x86:   /* TODO: SSA */
+	case 0x87:   /* TODO: ESA */
+		break;
 	case 0x88:   /* HTS -- Horizontal tab stop */
 		term.tabs[term.c.x] = 1;
 		break;
+	case 0x89:   /* TODO: HTJ */
+	case 0x8a:   /* TODO: VTS */
+	case 0x8b:   /* TODO: PLD */
+	case 0x8c:   /* TODO: PLU */
 	case 0x8d:   /* TODO: RI */
 	case 0x8e:   /* TODO: SS2 */
 	case 0x8f:   /* TODO: SS3 */
+	case 0x91:   /* TODO: PU1 */
+	case 0x92:   /* TODO: PU2 */
+	case 0x93:   /* TODO: STS */
+	case 0x94:   /* TODO: CCH */
+	case 0x95:   /* TODO: MW */
+	case 0x96:   /* TODO: SPA */
+	case 0x97:   /* TODO: EPA */
 	case 0x98:   /* TODO: SOS */
+	case 0x99:   /* TODO: SGCI */
 		break;
 	case 0x9a:   /* DECID -- Identify Terminal */
 		ttywrite(vtiden, sizeof(vtiden) - 1);
@@ -2590,9 +2903,9 @@
 	case 0x9c:   /* TODO: ST */
 		break;
 	case 0x90:   /* DCS -- Device Control String */
-	case 0x9f:   /* APC -- Application Program Command */
-	case 0x9e:   /* PM -- Privacy Message */
 	case 0x9d:   /* OSC -- Operating System Command */
+	case 0x9e:   /* PM -- Privacy Message */
+	case 0x9f:   /* APC -- Application Program Command */
 		tstrsequence(ascii);
 		return;
 	}
@@ -2605,8 +2918,9 @@
  * more characters for this sequence, otherwise 0
  */
 int
-eschandle(uchar ascii) {
-	switch(ascii) {
+eschandle(uchar ascii)
+{
+	switch (ascii) {
 	case '[':
 		term.esc |= ESC_CSI;
 		return 0;
@@ -2632,8 +2946,8 @@
 		term.esc |= ESC_ALTCHARSET;
 		return 0;
 	case 'D': /* IND -- Linefeed */
-		if(term.c.y == term.bot) {
-			tscrollup(term.top, 1);
+		if (term.c.y == term.bot) {
+			tscrollup(term.top, 1, 1);
 		} else {
 			tmoveto(term.c.x, term.c.y+1);
 		}
@@ -2645,8 +2959,8 @@
 		term.tabs[term.c.x] = 1;
 		break;
 	case 'M': /* RI -- Reverse index */
-		if(term.c.y == term.top) {
-			tscrolldown(term.top, 1);
+		if (term.c.y == term.top) {
+			tscrolldown(term.top, 1, 1);
 		} else {
 			tmoveto(term.c.x, term.c.y-1);
 		}
@@ -2672,7 +2986,7 @@
 		tcursor(CURSOR_LOAD);
 		break;
 	case '\\': /* ST -- String Terminator */
-		if(term.esc & ESC_STR_END)
+		if (term.esc & ESC_STR_END)
 			strhandle();
 		break;
 	default:
@@ -2684,21 +2998,22 @@
 }
 
 void
-tputc(Rune u) {
+tputc(Rune u)
+{
 	char c[UTF_SIZ];
-	bool control;
+	int control;
 	int width, len;
 	Glyph *gp;
 
+	control = ISCONTROL(u);
 	len = utf8encode(u, c);
-	if((width = wcwidth(u)) == -1) {
+	if (!control && (width = wcwidth(u)) == -1) {
 		memcpy(c, "\357\277\275", 4); /* UTF_INVALID */
 		width = 1;
 	}
 
-	if(IS_SET(MODE_PRINT))
+	if (IS_SET(MODE_PRINT))
 		tprinter(c, len);
-	control = ISCONTROL(u);
 
 	/*
 	 * STR sequence must be checked before anything else
@@ -2706,12 +3021,12 @@
 	 * receives a ESC, a SUB, a ST or any other C1 control
 	 * character.
 	 */
-	if(term.esc & ESC_STR) {
-		if(u == '\a' || u == 030 || u == 032 || u == 033 ||
+	if (term.esc & ESC_STR) {
+		if (u == '\a' || u == 030 || u == 032 || u == 033 ||
 		   ISCONTROLC1(u)) {
 			term.esc &= ~(ESC_START|ESC_STR);
 			term.esc |= ESC_STR_END;
-		} else if(strescseq.len + len < sizeof(strescseq.buf) - 1) {
+		} else if (strescseq.len + len < sizeof(strescseq.buf) - 1) {
 			memmove(&strescseq.buf[strescseq.len], c, len);
 			strescseq.len += len;
 			return;
@@ -2738,16 +3053,16 @@
 	 * because they can be embedded inside a control sequence, and
 	 * they must not cause conflicts with sequences.
 	 */
-	if(control) {
+	if (control) {
 		tcontrolcode(u);
 		/*
 		 * control codes are not shown ever
 		 */
 		return;
-	} else if(term.esc & ESC_START) {
-		if(term.esc & ESC_CSI) {
+	} else if (term.esc & ESC_START) {
+		if (term.esc & ESC_CSI) {
 			csiescseq.buf[csiescseq.len++] = u;
-			if(BETWEEN(u, 0x40, 0x7E)
+			if (BETWEEN(u, 0x40, 0x7E)
 					|| csiescseq.len >= \
 					sizeof(csiescseq.buf)-1) {
 				term.esc = 0;
@@ -2755,9 +3070,9 @@
 				csihandle();
 			}
 			return;
-		} else if(term.esc & ESC_ALTCHARSET) {
+		} else if (term.esc & ESC_ALTCHARSET) {
 			tdeftran(u);
-		} else if(term.esc & ESC_TEST) {
+		} else if (term.esc & ESC_TEST) {
 			tdectest(u);
 		} else {
 			if (!eschandle(u))
@@ -2771,34 +3086,34 @@
 		 */
 		return;
 	}
-	if(sel.ob.x != -1 && BETWEEN(term.c.y, sel.ob.y, sel.oe.y))
+	if (sel.ob.x != -1 && BETWEEN(term.c.y, sel.ob.y, sel.oe.y))
 		selclear(NULL);
 
 	gp = &term.line[term.c.y][term.c.x];
-	if(IS_SET(MODE_WRAP) && (term.c.state & CURSOR_WRAPNEXT)) {
+	if (IS_SET(MODE_WRAP) && (term.c.state & CURSOR_WRAPNEXT)) {
 		gp->mode |= ATTR_WRAP;
 		tnewline(1);
 		gp = &term.line[term.c.y][term.c.x];
 	}
 
-	if(IS_SET(MODE_INSERT) && term.c.x+width < term.col)
+	if (IS_SET(MODE_INSERT) && term.c.x+width < term.col)
 		memmove(gp+width, gp, (term.col - term.c.x - width) * sizeof(Glyph));
 
-	if(term.c.x+width > term.col) {
+	if (term.c.x+width > term.col) {
 		tnewline(1);
 		gp = &term.line[term.c.y][term.c.x];
 	}
 
 	tsetchar(u, &term.c.attr, term.c.x, term.c.y);
 
-	if(width == 2) {
+	if (width == 2) {
 		gp->mode |= ATTR_WIDE;
-		if(term.c.x+1 < term.col) {
+		if (term.c.x+1 < term.col) {
 			gp[1].u = '\0';
 			gp[1].mode = ATTR_WDUMMY;
 		}
 	}
-	if(term.c.x+width < term.col) {
+	if (term.c.x+width < term.col) {
 		tmoveto(term.c.x+width, term.c.y);
 	} else {
 		term.c.state |= CURSOR_WRAPNEXT;
@@ -2806,14 +3121,15 @@
 }
 
 void
-tresize(int col, int row) {
-	int i;
+tresize(int col, int row)
+{
+	int i, j;
 	int minrow = MIN(row, term.row);
 	int mincol = MIN(col, term.col);
-	bool *bp;
+	int *bp;
 	TCursor c;
 
-	if(col < 1 || row < 1) {
+	if (col < 1 || row < 1) {
 		fprintf(stderr,
 		        "tresize: error resizing to %dx%d\n", col, row);
 		return;
@@ -2824,7 +3140,7 @@
 	 * tscrollup would work here, but we can optimize to
 	 * memmove because we're freeing the earlier lines
 	 */
-	for(i = 0; i <= term.c.y - row; i++) {
+	for (i = 0; i <= term.c.y - row; i++) {
 		free(term.line[i]);
 		free(term.alt[i]);
 	}
@@ -2833,7 +3149,7 @@
 		memmove(term.line, term.line + i, row * sizeof(Line));
 		memmove(term.alt, term.alt + i, row * sizeof(Line));
 	}
-	for(i += row; i < term.row; i++) {
+	for (i += row; i < term.row; i++) {
 		free(term.line[i]);
 		free(term.alt[i]);
 	}
@@ -2844,27 +3160,36 @@
 	/* resize to new height */
 	term.line = xrealloc(term.line, row * sizeof(Line));
 	term.alt  = xrealloc(term.alt,  row * sizeof(Line));
+	term.hist  = xrealloc(term.hist,  histsize * sizeof(Line));
 	term.dirty = xrealloc(term.dirty, row * sizeof(*term.dirty));
 	term.tabs = xrealloc(term.tabs, col * sizeof(*term.tabs));
 
+	for (i = 0; i < histsize; i++) {
+		term.hist[i] = xrealloc(term.hist[i], col * sizeof(Glyph));
+		for (j = mincol; j < col; j++) {
+			term.hist[i][j] = term.c.attr;
+			term.hist[i][j].u = ' ';
+		}
+	}
+
 	/* resize each row to new width, zero-pad if needed */
-	for(i = 0; i < minrow; i++) {
+	for (i = 0; i < minrow; i++) {
 		term.line[i] = xrealloc(term.line[i], col * sizeof(Glyph));
 		term.alt[i]  = xrealloc(term.alt[i],  col * sizeof(Glyph));
 	}
 
 	/* allocate any new rows */
-	for(/* i == minrow */; i < row; i++) {
+	for (/* i == minrow */; i < row; i++) {
 		term.line[i] = xmalloc(col * sizeof(Glyph));
 		term.alt[i] = xmalloc(col * sizeof(Glyph));
 	}
-	if(col > term.col) {
+	if (col > term.col) {
 		bp = term.tabs + term.col;
 
 		memset(bp, 0, sizeof(*term.tabs) * (col - term.col));
-		while(--bp > term.tabs && !*bp)
+		while (--bp > term.tabs && !*bp)
 			/* nothing */ ;
-		for(bp += tabspaces; bp < term.tabs + col; bp += tabspaces)
+		for (bp += tabspaces; bp < term.tabs + col; bp += tabspaces)
 			*bp = 1;
 	}
 	/* update terminal size */
@@ -2876,11 +3201,11 @@
 	tmoveto(term.c.x, term.c.y);
 	/* Clearing both screens (it makes dirty all lines) */
 	c = term.c;
-	for(i = 0; i < 2; i++) {
-		if(mincol < col && 0 < minrow) {
+	for (i = 0; i < 2; i++) {
+		if (mincol < col && 0 < minrow) {
 			tclearregion(mincol, 0, col - 1, minrow - 1);
 		}
-		if(0 < col && minrow < row) {
+		if (0 < col && minrow < row) {
 			tclearregion(0, minrow, col - 1, row - 1);
 		}
 		tswapscreen();
@@ -2890,29 +3215,31 @@
 }
 
 void
-xresize(int col, int row) {
+xresize(int col, int row)
+{
 	xw.tw = MAX(1, col * xw.cw);
 	xw.th = MAX(1, row * xw.ch);
 
 	XFreePixmap(xw.dpy, xw.buf);
-	xw.buf = XCreatePixmap(xw.dpy, xw.win, xw.w, xw.h,
-			DefaultDepth(xw.dpy, xw.scr));
+	xw.buf = XCreatePixmap(xw.dpy, xw.win, xw.w, xw.h, xw.depth);
 	XftDrawChange(xw.draw, xw.buf);
 	xclear(0, 0, xw.w, xw.h);
 }
 
 ushort
-sixd_to_16bit(int x) {
+sixd_to_16bit(int x)
+{
 	return x == 0 ? 0 : 0x3737 + 0x2828 * x;
 }
 
-bool
-xloadcolor(int i, const char *name, Color *ncolor) {
+int
+xloadcolor(int i, const char *name, Color *ncolor)
+{
 	XRenderColor color = { .alpha = 0xffff };
 
-	if(!name) {
-		if(BETWEEN(i, 16, 255)) { /* 256 color */
-			if(i < 6*6*6+16) { /* same colors as xterm */
+	if (!name) {
+		if (BETWEEN(i, 16, 255)) { /* 256 color */
+			if (i < 6*6*6+16) { /* same colors as xterm */
 				color.red   = sixd_to_16bit( ((i-16)/36)%6 );
 				color.green = sixd_to_16bit( ((i-16)/6) %6 );
 				color.blue  = sixd_to_16bit( ((i-16)/1) %6 );
@@ -2925,48 +3252,61 @@
 		} else
 			name = colorname[i];
 	}
+
 	return XftColorAllocName(xw.dpy, xw.vis, xw.cmap, name, ncolor);
 }
 
 void
-xloadcols(void) {
+xloadcols(void)
+{
 	int i;
-	static bool loaded;
+	static int loaded;
 	Color *cp;
 
-	if(loaded) {
+	if (loaded) {
 		for (cp = dc.col; cp < &dc.col[LEN(dc.col)]; ++cp)
 			XftColorFree(xw.dpy, xw.vis, xw.cmap, cp);
 	}
 
-	for(i = 0; i < LEN(dc.col); i++)
-		if(!xloadcolor(i, NULL, &dc.col[i])) {
-			if(colorname[i])
+	for (i = 0; i < LEN(dc.col); i++)
+		if (!xloadcolor(i, NULL, &dc.col[i])) {
+			if (colorname[i])
 				die("Could not allocate color '%s'\n", colorname[i]);
 			else
 				die("Could not allocate color %d\n", i);
 		}
-	loaded = true;
+
+	/* set alpha value of bg color */
+	if (USE_ARGB) {
+		dc.col[defaultbg].color.alpha = (0xffff * alpha) / OPAQUE; //0xcccc;
+		dc.col[defaultbg].pixel &= 0x00111111;
+		dc.col[defaultbg].pixel |= alpha << 24; // 0xcc000000;
+	}
+
+	loaded = 1;
 }
 
 int
-xsetcolorname(int x, const char *name) {
+xsetcolorname(int x, const char *name)
+{
 	Color ncolor;
 
-	if(!BETWEEN(x, 0, LEN(dc.col)))
+	if (!BETWEEN(x, 0, LEN(dc.col)))
 		return 1;
 
 
-	if(!xloadcolor(x, name, &ncolor))
+	if (!xloadcolor(x, name, &ncolor))
 		return 1;
 
 	XftColorFree(xw.dpy, xw.vis, xw.cmap, &dc.col[x]);
 	dc.col[x] = ncolor;
+
 	return 0;
 }
 
 void
-xtermclear(int col1, int row1, int col2, int row2) {
+xtermclear(int col1, int row1, int col2, int row2)
+{
 	XftDrawRect(xw.draw,
 			&dc.col[IS_SET(MODE_REVERSE) ? defaultfg : defaultbg],
 			borderpx + col1 * xw.cw,
@@ -2979,14 +3319,16 @@
  * Absolute coordinates.
  */
 void
-xclear(int x1, int y1, int x2, int y2) {
+xclear(int x1, int y1, int x2, int y2)
+{
 	XftDrawRect(xw.draw,
 			&dc.col[IS_SET(MODE_REVERSE)? defaultfg : defaultbg],
 			x1, y1, x2-x1, y2-y1);
 }
 
 void
-xhints(void) {
+xhints(void)
+{
 	XClassHint class = {opt_class ? opt_class : termname, termname};
 	XWMHints wm = {.flags = InputHint, .input = 1};
 	XSizeHints *sizeh = NULL;
@@ -3000,12 +3342,12 @@
 	sizeh->width_inc = xw.cw;
 	sizeh->base_height = 2 * borderpx;
 	sizeh->base_width = 2 * borderpx;
-	if(xw.isfixed == True) {
+	if (xw.isfixed) {
 		sizeh->flags |= PMaxSize | PMinSize;
 		sizeh->min_width = sizeh->max_width = xw.w;
 		sizeh->min_height = sizeh->max_height = xw.h;
 	}
-	if(xw.gm & (XValue|YValue)) {
+	if (xw.gm & (XValue|YValue)) {
 		sizeh->flags |= USPosition | PWinGravity;
 		sizeh->x = xw.l;
 		sizeh->y = xw.t;
@@ -3018,8 +3360,9 @@
 }
 
 int
-xgeommasktogravity(int mask) {
-	switch(mask & (XNegative|YNegative)) {
+xgeommasktogravity(int mask)
+{
+	switch (mask & (XNegative|YNegative)) {
 	case 0:
 		return NorthWestGravity;
 	case XNegative:
@@ -3027,19 +3370,21 @@
 	case YNegative:
 		return SouthWestGravity;
 	}
+
 	return SouthEastGravity;
 }
 
 int
-xloadfont(Font *f, FcPattern *pattern) {
+xloadfont(Font *f, FcPattern *pattern)
+{
 	FcPattern *match;
 	FcResult result;
 
 	match = FcFontMatch(NULL, pattern, &result);
-	if(!match)
+	if (!match)
 		return 1;
 
-	if(!(f->match = XftFontOpenPattern(xw.dpy, match))) {
+	if (!(f->match = XftFontOpenPattern(xw.dpy, match))) {
 		FcPatternDestroy(match);
 		return 1;
 	}
@@ -3059,30 +3404,31 @@
 }
 
 void
-xloadfonts(char *fontstr, double fontsize) {
+xloadfonts(char *fontstr, double fontsize)
+{
 	FcPattern *pattern;
 	double fontval;
 	float ceilf(float);
 
-	if(fontstr[0] == '-') {
+	if (fontstr[0] == '-') {
 		pattern = XftXlfdParse(fontstr, False, False);
 	} else {
 		pattern = FcNameParse((FcChar8 *)fontstr);
 	}
 
-	if(!pattern)
+	if (!pattern)
 		die("st: can't open font %s\n", fontstr);
 
-	if(fontsize > 1) {
+	if (fontsize > 1) {
 		FcPatternDel(pattern, FC_PIXEL_SIZE);
 		FcPatternDel(pattern, FC_SIZE);
 		FcPatternAddDouble(pattern, FC_PIXEL_SIZE, (double)fontsize);
 		usedfontsize = fontsize;
 	} else {
-		if(FcPatternGetDouble(pattern, FC_PIXEL_SIZE, 0, &fontval) ==
+		if (FcPatternGetDouble(pattern, FC_PIXEL_SIZE, 0, &fontval) ==
 				FcResultMatch) {
 			usedfontsize = fontval;
-		} else if(FcPatternGetDouble(pattern, FC_SIZE, 0, &fontval) ==
+		} else if (FcPatternGetDouble(pattern, FC_SIZE, 0, &fontval) ==
 				FcResultMatch) {
 			usedfontsize = -1;
 		} else {
@@ -3099,14 +3445,14 @@
 	FcConfigSubstitute(0, pattern, FcMatchPattern);
 	FcDefaultSubstitute(pattern);
 
-	if(xloadfont(&dc.font, pattern))
+	if (xloadfont(&dc.font, pattern))
 		die("st: can't open font %s\n", fontstr);
 
-	if(usedfontsize < 0) {
+	if (usedfontsize < 0) {
 		FcPatternGetDouble(dc.font.match->pattern,
 		                   FC_PIXEL_SIZE, 0, &fontval);
 		usedfontsize = fontval;
-		if(fontsize == 0)
+		if (fontsize == 0)
 			defaultfontsize = fontval;
 	}
 
@@ -3116,34 +3462,36 @@
 
 	FcPatternDel(pattern, FC_SLANT);
 	FcPatternAddInteger(pattern, FC_SLANT, FC_SLANT_ITALIC);
-	if(xloadfont(&dc.ifont, pattern))
+	if (xloadfont(&dc.ifont, pattern))
 		die("st: can't open font %s\n", fontstr);
 
 	FcPatternDel(pattern, FC_WEIGHT);
 	FcPatternAddInteger(pattern, FC_WEIGHT, FC_WEIGHT_BOLD);
-	if(xloadfont(&dc.ibfont, pattern))
+	if (xloadfont(&dc.ibfont, pattern))
 		die("st: can't open font %s\n", fontstr);
 
 	FcPatternDel(pattern, FC_SLANT);
 	FcPatternAddInteger(pattern, FC_SLANT, FC_SLANT_ROMAN);
-	if(xloadfont(&dc.bfont, pattern))
+	if (xloadfont(&dc.bfont, pattern))
 		die("st: can't open font %s\n", fontstr);
 
 	FcPatternDestroy(pattern);
 }
 
 void
-xunloadfont(Font *f) {
+xunloadfont(Font *f)
+{
 	XftFontClose(xw.dpy, f->match);
 	FcPatternDestroy(f->pattern);
-	if(f->set)
+	if (f->set)
 		FcFontSetDestroy(f->set);
 }
 
 void
-xunloadfonts(void) {
+xunloadfonts(void)
+{
 	/* Free the loaded fonts in the font cache.  */
-	while(frclen > 0)
+	while (frclen > 0)
 		XftFontClose(xw.dpy, frc[--frclen].font);
 
 	xunloadfont(&dc.font);
@@ -3153,7 +3501,8 @@
 }
 
 void
-xzoom(const Arg *arg) {
+xzoom(const Arg *arg)
+{
 	Arg larg;
 
 	larg.f = usedfontsize + arg->f;
@@ -3161,7 +3510,8 @@
 }
 
 void
-xzoomabs(const Arg *arg) {
+xzoomabs(const Arg *arg)
+{
 	xunloadfonts();
 	xloadfonts(usedfont, arg->f);
 	cresize(0, 0);
@@ -3170,44 +3520,81 @@
 }
 
 void
-xzoomreset(const Arg *arg) {
+xzoomreset(const Arg *arg)
+{
 	Arg larg;
 
-	if(defaultfontsize > 0) {
+	if (defaultfontsize > 0) {
 		larg.f = defaultfontsize;
 		xzoomabs(&larg);
 	}
 }
 
 void
-xinit(void) {
+xinit(void)
+{
 	XGCValues gcvalues;
 	Cursor cursor;
 	Window parent;
 	pid_t thispid = getpid();
+	XColor xmousefg, xmousebg;
 
-	if(!(xw.dpy = XOpenDisplay(NULL)))
+	if (!(xw.dpy = XOpenDisplay(NULL)))
 		die("Can't open display\n");
 	xw.scr = XDefaultScreen(xw.dpy);
-	xw.vis = XDefaultVisual(xw.dpy, xw.scr);
+	xw.depth = (USE_ARGB) ? 32: XDefaultDepth(xw.dpy, xw.scr);
+	if (! USE_ARGB)
+		xw.vis = XDefaultVisual(xw.dpy, xw.scr);
+	else {
+		XVisualInfo *vis;
+		XRenderPictFormat *fmt;
+		int nvi;
+		int i;
+
+		XVisualInfo tpl = {
+			.screen = xw.scr,
+			.depth = 32,
+			.class = TrueColor
+		};
+
+		vis = XGetVisualInfo(xw.dpy, VisualScreenMask | VisualDepthMask | VisualClassMask, &tpl, &nvi);
+		xw.vis = NULL;
+		for(i = 0; i < nvi; i ++) {
+			fmt = XRenderFindVisualFormat(xw.dpy, vis[i].visual);
+			if (fmt->type == PictTypeDirect && fmt->direct.alphaMask) {
+				xw.vis = vis[i].visual;
+				break;
+			}
+		}
+
+		XFree(vis);
+
+		if (! xw.vis) {
+			fprintf(stderr, "Couldn't find ARGB visual.\n");
+			exit(1);
+		}
+	}
 
 	/* font */
-	if(!FcInit())
+	if (!FcInit())
 		die("Could not init fontconfig.\n");
 
 	usedfont = (opt_font == NULL)? font : opt_font;
 	xloadfonts(usedfont, 0);
 
 	/* colors */
-	xw.cmap = XDefaultColormap(xw.dpy, xw.scr);
+	if (! USE_ARGB)
+		xw.cmap = XDefaultColormap(xw.dpy, xw.scr);
+	else
+		xw.cmap = XCreateColormap(xw.dpy, XRootWindow(xw.dpy, xw.scr), xw.vis, None);
 	xloadcols();
 
 	/* adjust fixed window geometry */
 	xw.w = 2 * borderpx + term.col * xw.cw;
 	xw.h = 2 * borderpx + term.row * xw.ch;
-	if(xw.gm & XNegative)
+	if (xw.gm & XNegative)
 		xw.l += DisplayWidth(xw.dpy, xw.scr) - xw.w - 2;
-	if(xw.gm & YNegative)
+	if (xw.gm & YNegative)
 		xw.t += DisplayWidth(xw.dpy, xw.scr) - xw.h - 2;
 
 	/* Events */
@@ -3222,16 +3609,17 @@
 	if (!(opt_embed && (parent = strtol(opt_embed, NULL, 0))))
 		parent = XRootWindow(xw.dpy, xw.scr);
 	xw.win = XCreateWindow(xw.dpy, parent, xw.l, xw.t,
-			xw.w, xw.h, 0, XDefaultDepth(xw.dpy, xw.scr), InputOutput,
+			xw.w, xw.h, 0, xw.depth, InputOutput,
 			xw.vis, CWBackPixel | CWBorderPixel | CWBitGravity
 			| CWEventMask | CWColormap, &xw.attrs);
 
 	memset(&gcvalues, 0, sizeof(gcvalues));
 	gcvalues.graphics_exposures = False;
-	dc.gc = XCreateGC(xw.dpy, parent, GCGraphicsExposures,
+	xw.buf = XCreatePixmap(xw.dpy, xw.win, xw.w, xw.h, xw.depth);
+	dc.gc = XCreateGC(xw.dpy,
+			(USE_ARGB)? xw.buf: parent,
+			GCGraphicsExposures,
 			&gcvalues);
-	xw.buf = XCreatePixmap(xw.dpy, xw.win, xw.w, xw.h,
-			DefaultDepth(xw.dpy, xw.scr));
 	XSetForeground(xw.dpy, dc.gc, dc.col[defaultbg].pixel);
 	XFillRectangle(xw.dpy, xw.buf, dc.gc, 0, 0, xw.w, xw.h);
 
@@ -3239,11 +3627,11 @@
 	xw.draw = XftDrawCreate(xw.dpy, xw.buf, xw.vis, xw.cmap);
 
 	/* input methods */
-	if((xw.xim = XOpenIM(xw.dpy, NULL, NULL, NULL)) == NULL) {
+	if ((xw.xim = XOpenIM(xw.dpy, NULL, NULL, NULL)) == NULL) {
 		XSetLocaleModifiers("@im=local");
-		if((xw.xim =  XOpenIM(xw.dpy, NULL, NULL, NULL)) == NULL) {
+		if ((xw.xim =  XOpenIM(xw.dpy, NULL, NULL, NULL)) == NULL) {
 			XSetLocaleModifiers("@im=");
-			if((xw.xim = XOpenIM(xw.dpy,
+			if ((xw.xim = XOpenIM(xw.dpy,
 					NULL, NULL, NULL)) == NULL) {
 				die("XOpenIM failed. Could not open input"
 					" device.\n");
@@ -3253,15 +3641,26 @@
 	xw.xic = XCreateIC(xw.xim, XNInputStyle, XIMPreeditNothing
 					   | XIMStatusNothing, XNClientWindow, xw.win,
 					   XNFocusWindow, xw.win, NULL);
-	if(xw.xic == NULL)
+	if (xw.xic == NULL)
 		die("XCreateIC failed. Could not obtain input method.\n");
 
 	/* white cursor, black outline */
-	cursor = XCreateFontCursor(xw.dpy, XC_xterm);
+	cursor = XCreateFontCursor(xw.dpy, mouseshape);
 	XDefineCursor(xw.dpy, xw.win, cursor);
-	XRecolorCursor(xw.dpy, cursor,
-		&(XColor){.red = 0xffff, .green = 0xffff, .blue = 0xffff},
-		&(XColor){.red = 0x0000, .green = 0x0000, .blue = 0x0000});
+
+	if (XParseColor(xw.dpy, xw.cmap, colorname[mousefg], &xmousefg) == 0) {
+		xmousefg.red   = 0xffff;
+		xmousefg.green = 0xffff;
+		xmousefg.blue  = 0xffff;
+	}
+
+	if (XParseColor(xw.dpy, xw.cmap, colorname[mousebg], &xmousebg) == 0) {
+		xmousebg.red   = 0x0000;
+		xmousebg.green = 0x0000;
+		xmousebg.blue  = 0x0000;
+	}
+
+	XRecolorCursor(xw.dpy, cursor, &xmousefg, &xmousebg);
 
 	xw.xembed = XInternAtom(xw.dpy, "_XEMBED", False);
 	xw.wmdeletewin = XInternAtom(xw.dpy, "WM_DELETE_WINDOW", False);
@@ -3294,28 +3693,28 @@
 	FcCharSet *fccharset;
 	int i, f, numspecs = 0;
 
-	for(i = 0, xp = winx, yp = winy + font->ascent; i < len; ++i) {
+	for (i = 0, xp = winx, yp = winy + font->ascent; i < len; ++i) {
 		/* Fetch rune and mode for current glyph. */
 		rune = glyphs[i].u;
 		mode = glyphs[i].mode;
 
 		/* Skip dummy wide-character spacing. */
-		if(mode == ATTR_WDUMMY)
+		if (mode == ATTR_WDUMMY)
 			continue;
 
 		/* Determine font for glyph if different from previous glyph. */
-		if(prevmode != mode) {
+		if (prevmode != mode) {
 			prevmode = mode;
 			font = &dc.font;
 			frcflags = FRC_NORMAL;
 			runewidth = xw.cw * ((mode & ATTR_WIDE) ? 2.0f : 1.0f);
-			if((mode & ATTR_ITALIC) && (mode & ATTR_BOLD)) {
+			if ((mode & ATTR_ITALIC) && (mode & ATTR_BOLD)) {
 				font = &dc.ibfont;
 				frcflags = FRC_ITALICBOLD;
-			} else if(mode & ATTR_ITALIC) {
+			} else if (mode & ATTR_ITALIC) {
 				font = &dc.ifont;
 				frcflags = FRC_ITALIC;
-			} else if(mode & ATTR_BOLD) {
+			} else if (mode & ATTR_BOLD) {
 				font = &dc.bfont;
 				frcflags = FRC_BOLD;
 			}
@@ -3324,7 +3723,7 @@
 
 		/* Lookup character index with default font. */
 		glyphidx = XftCharIndex(xw.dpy, font->match, rune);
-		if(glyphidx) {
+		if (glyphidx) {
 			specs[numspecs].font = font->match;
 			specs[numspecs].glyph = glyphidx;
 			specs[numspecs].x = (short)xp;
@@ -3335,23 +3734,23 @@
 		}
 
 		/* Fallback on font cache, search the font cache for match. */
-		for(f = 0; f < frclen; f++) {
+		for (f = 0; f < frclen; f++) {
 			glyphidx = XftCharIndex(xw.dpy, frc[f].font, rune);
 			/* Everything correct. */
-			if(glyphidx && frc[f].flags == frcflags)
+			if (glyphidx && frc[f].flags == frcflags)
 				break;
 			/* We got a default font for a not found glyph. */
-			if(!glyphidx && frc[f].flags == frcflags
+			if (!glyphidx && frc[f].flags == frcflags
 					&& frc[f].unicodep == rune) {
 				break;
 			}
 		}
 
 		/* Nothing was found. Use fontconfig to find matching font. */
-		if(f >= frclen) {
-			if(!font->set)
+		if (f >= frclen) {
+			if (!font->set)
 				font->set = FcFontSort(0, font->pattern,
-				                       FcTrue, 0, &fcres);
+				                       1, 0, &fcres);
 			fcsets[0] = font->set;
 
 			/*
@@ -3367,8 +3766,7 @@
 			FcCharSetAddChar(fccharset, rune);
 			FcPatternAddCharSet(fcpattern, FC_CHARSET,
 					fccharset);
-			FcPatternAddBool(fcpattern, FC_SCALABLE,
-					FcTrue);
+			FcPatternAddBool(fcpattern, FC_SCALABLE, 1);
 
 			FcConfigSubstitute(0, fcpattern,
 					FcMatchPattern);
@@ -3380,7 +3778,7 @@
 			/*
 			 * Overwrite or create the new cache entry.
 			 */
-			if(frclen >= LEN(frc)) {
+			if (frclen >= LEN(frc)) {
 				frclen = LEN(frc) - 1;
 				XftFontClose(xw.dpy, frc[frclen].font);
 				frc[frclen].unicodep = 0;
@@ -3412,7 +3810,8 @@
 }
 
 void
-xdrawglyphfontspecs(const XftGlyphFontSpec *specs, Glyph base, int len, int x, int y) {
+xdrawglyphfontspecs(const XftGlyphFontSpec *specs, Glyph base, int len, int x, int y)
+{
 	int charlen = len * ((base.mode & ATTR_WIDE) ? 2 : 1);
 	int winx = borderpx + x * xw.cw, winy = borderpx + y * xw.ch,
 	    width = charlen * xw.cw;
@@ -3421,16 +3820,16 @@
 	XRectangle r;
 
 	/* Determine foreground and background colors based on mode. */
-	if(base.fg == defaultfg) {
-		if(base.mode & ATTR_ITALIC)
+	if (base.fg == defaultfg) {
+		if (base.mode & ATTR_ITALIC)
 			base.fg = defaultitalic;
-		else if((base.mode & ATTR_ITALIC) && (base.mode & ATTR_BOLD))
+		else if ((base.mode & ATTR_ITALIC) && (base.mode & ATTR_BOLD))
 			base.fg = defaultitalic;
-		else if(base.mode & ATTR_UNDERLINE)
+		else if (base.mode & ATTR_UNDERLINE)
 			base.fg = defaultunderline;
 	}
 
-	if(IS_TRUECOL(base.fg)) {
+	if (IS_TRUECOL(base.fg)) {
 		colfg.alpha = 0xffff;
 		colfg.red = TRUERED(base.fg);
 		colfg.green = TRUEGREEN(base.fg);
@@ -3441,7 +3840,7 @@
 		fg = &dc.col[base.fg];
 	}
 
-	if(IS_TRUECOL(base.bg)) {
+	if (IS_TRUECOL(base.bg)) {
 		colbg.alpha = 0xffff;
 		colbg.green = TRUEGREEN(base.bg);
 		colbg.red = TRUERED(base.bg);
@@ -3453,11 +3852,11 @@
 	}
 
 	/* Change basic system colors [0-7] to bright system colors [8-15] */
-	if((base.mode & ATTR_BOLD_FAINT) == ATTR_BOLD && BETWEEN(base.fg, 0, 7))
+	if ((base.mode & ATTR_BOLD_FAINT) == ATTR_BOLD && BETWEEN(base.fg, 0, 7))
 		fg = &dc.col[base.fg + 8];
 
-	if(IS_SET(MODE_REVERSE)) {
-		if(fg == &dc.col[defaultfg]) {
+	if (IS_SET(MODE_REVERSE)) {
+		if (fg == &dc.col[defaultfg]) {
 			fg = &dc.col[defaultbg];
 		} else {
 			colfg.red = ~fg->color.red;
@@ -3469,7 +3868,7 @@
 			fg = &revfg;
 		}
 
-		if(bg == &dc.col[defaultbg]) {
+		if (bg == &dc.col[defaultbg]) {
 			bg = &dc.col[defaultfg];
 		} else {
 			colbg.red = ~bg->color.red;
@@ -3482,13 +3881,13 @@
 		}
 	}
 
-	if(base.mode & ATTR_REVERSE) {
+	if (base.mode & ATTR_REVERSE) {
 		temp = fg;
 		fg = bg;
 		bg = temp;
 	}
 
-	if((base.mode & ATTR_BOLD_FAINT) == ATTR_FAINT) {
+	if ((base.mode & ATTR_BOLD_FAINT) == ATTR_FAINT) {
 		colfg.red = fg->color.red / 2;
 		colfg.green = fg->color.green / 2;
 		colfg.blue = fg->color.blue / 2;
@@ -3496,24 +3895,24 @@
 		fg = &revfg;
 	}
 
-	if(base.mode & ATTR_BLINK && term.mode & MODE_BLINK)
+	if (base.mode & ATTR_BLINK && term.mode & MODE_BLINK)
 		fg = bg;
 
-	if(base.mode & ATTR_INVISIBLE)
+	if (base.mode & ATTR_INVISIBLE)
 		fg = bg;
 
 	/* Intelligent cleaning up of the borders. */
-	if(x == 0) {
+	if (x == 0) {
 		xclear(0, (y == 0)? 0 : winy, borderpx,
 			winy + xw.ch + ((y >= term.row-1)? xw.h : 0));
 	}
-	if(x + charlen >= term.col) {
+	if (x + charlen >= term.col) {
 		xclear(winx + width, (y == 0)? 0 : winy, xw.w,
 			((y >= term.row-1)? xw.h : (winy + xw.ch)));
 	}
-	if(y == 0)
+	if (y == 0)
 		xclear(winx, 0, winx + width, borderpx);
-	if(y == term.row-1)
+	if (y == term.row-1)
 		xclear(winx, winy + xw.ch, winx + width, xw.h);
 
 	/* Clean up the region we want to draw to. */
@@ -3530,12 +3929,12 @@
 	XftDrawGlyphFontSpec(xw.draw, fg, specs, len);
 
 	/* Render underline and strikethrough. */
-	if(base.mode & ATTR_UNDERLINE) {
+	if (base.mode & ATTR_UNDERLINE) {
 		XftDrawRect(xw.draw, fg, winx, winy + dc.font.ascent + 1,
 				width, 1);
 	}
 
-	if(base.mode & ATTR_STRUCK) {
+	if (base.mode & ATTR_STRUCK) {
 		XftDrawRect(xw.draw, fg, winx, winy + 2 * dc.font.ascent / 3,
 				width, 1);
 	}
@@ -3545,18 +3944,23 @@
 }
 
 void
-xdrawglyph(Glyph g, int x, int y) {
+xdrawglyph(Glyph g, int x, int y)
+{
 	int numspecs;
 	XftGlyphFontSpec spec;
+
 	numspecs = xmakeglyphfontspecs(&spec, &g, 1, x, y);
 	xdrawglyphfontspecs(&spec, g, numspecs, x, y);
 }
 
 void
-xdrawcursor(void) {
+xdrawcursor(void)
+{
 	static int oldx = 0, oldy = 0;
 	int curx;
-	Glyph g = {' ', ATTR_NULL, defaultbg, defaultcs};
+	Glyph g = {' ', ATTR_NULL, defaultbg, defaultcs}, og;
+	int ena_sel = sel.ob.x != -1 && sel.alt == IS_SET(MODE_ALTSCREEN);
+	Color drawcol;
 
 	LIMIT(oldx, 0, term.col-1);
 	LIMIT(oldy, 0, term.row-1);
@@ -3564,63 +3968,86 @@
 	curx = term.c.x;
 
 	/* adjust position if in dummy */
-	if(term.line[oldy][oldx].mode & ATTR_WDUMMY)
+	if (term.line[oldy][oldx].mode & ATTR_WDUMMY)
 		oldx--;
-	if(term.line[term.c.y][curx].mode & ATTR_WDUMMY)
+	if (term.line[term.c.y][curx].mode & ATTR_WDUMMY)
 		curx--;
 
+	/* remove the old cursor */
+	og = term.line[oldy][oldx];
+	if (ena_sel && selected(oldx, oldy))
+		og.mode ^= ATTR_REVERSE;
+	xdrawglyph(og, oldx, oldy);
+
 	g.u = term.line[term.c.y][term.c.x].u;
 
-	/* remove the old cursor */
-	xdrawglyph(term.line[oldy][oldx], oldx, oldy);
+	/*
+	 * Select the right color for the right mode.
+	 */
+	if (IS_SET(MODE_REVERSE)) {
+		g.mode |= ATTR_REVERSE;
+		g.bg = defaultfg;
+		if (ena_sel && selected(term.c.x, term.c.y)) {
+			drawcol = dc.col[defaultcs];
+			g.fg = defaultrcs;
+		} else {
+			drawcol = dc.col[defaultrcs];
+			g.fg = defaultcs;
+		}
+	} else {
+		if (ena_sel && selected(term.c.x, term.c.y)) {
+			drawcol = dc.col[defaultrcs];
+			g.fg = defaultfg;
+			g.bg = defaultrcs;
+		} else {
+			drawcol = dc.col[defaultcs];
+		}
+	}
 
-	if(IS_SET(MODE_HIDE))
+	if (IS_SET(MODE_HIDE))
 		return;
 
 	/* draw the new one */
-	if(xw.state & WIN_FOCUSED) {
+	if (xw.state & WIN_FOCUSED) {
 		switch (xw.cursor) {
-			case 0: /* Blinking Block */
-			case 1: /* Blinking Block (Default) */
-			case 2: /* Steady Block */
-				if(IS_SET(MODE_REVERSE)) {
-						g.mode |= ATTR_REVERSE;
-						g.fg = defaultcs;
-						g.bg = defaultfg;
-					}
-
-				g.mode |= term.line[term.c.y][curx].mode & ATTR_WIDE;
-				xdrawglyph(g, term.c.x, term.c.y);
-				break;
-			case 3: /* Blinking Underline */
-			case 4: /* Steady Underline */
-				XftDrawRect(xw.draw, &dc.col[defaultcs],
-						borderpx + curx * xw.cw,
-						borderpx + (term.c.y + 1) * xw.ch - cursorthickness,
-						xw.cw, cursorthickness);
-				break;
-			case 5: /* Blinking bar */
-			case 6: /* Steady bar */
-				XftDrawRect(xw.draw, &dc.col[defaultcs],
-						borderpx + curx * xw.cw,
-						borderpx + term.c.y * xw.ch,
-						cursorthickness, xw.ch);
-				break;
+		case 7: /* st extension: snowman */
+			utf8decode("☃", &g.u, UTF_SIZ);
+		case 0: /* Blinking Block */
+		case 1: /* Blinking Block (Default) */
+		case 2: /* Steady Block */
+			g.mode |= term.line[term.c.y][curx].mode & ATTR_WIDE;
+			xdrawglyph(g, term.c.x, term.c.y);
+			break;
+		case 3: /* Blinking Underline */
+		case 4: /* Steady Underline */
+			XftDrawRect(xw.draw, &drawcol,
+					borderpx + curx * xw.cw,
+					borderpx + (term.c.y + 1) * xw.ch - \
+						cursorthickness,
+					xw.cw, cursorthickness);
+			break;
+		case 5: /* Blinking bar */
+		case 6: /* Steady bar */
+			XftDrawRect(xw.draw, &drawcol,
+					borderpx + curx * xw.cw,
+					borderpx + term.c.y * xw.ch,
+					cursorthickness, xw.ch);
+			break;
 		}
 	} else {
-		XftDrawRect(xw.draw, &dc.col[defaultcs],
+		XftDrawRect(xw.draw, &drawcol,
 				borderpx + curx * xw.cw,
 				borderpx + term.c.y * xw.ch,
 				xw.cw - 1, 1);
-		XftDrawRect(xw.draw, &dc.col[defaultcs],
+		XftDrawRect(xw.draw, &drawcol,
 				borderpx + curx * xw.cw,
 				borderpx + term.c.y * xw.ch,
 				1, xw.ch - 1);
-		XftDrawRect(xw.draw, &dc.col[defaultcs],
+		XftDrawRect(xw.draw, &drawcol,
 				borderpx + (curx + 1) * xw.cw - 1,
 				borderpx + term.c.y * xw.ch,
 				1, xw.ch - 1);
-		XftDrawRect(xw.draw, &dc.col[defaultcs],
+		XftDrawRect(xw.draw, &drawcol,
 				borderpx + curx * xw.cw,
 				borderpx + (term.c.y + 1) * xw.ch - 1,
 				xw.cw, 1);
@@ -3630,7 +4057,8 @@
 
 
 void
-xsettitle(char *p) {
+xsettitle(char *p)
+{
 	XTextProperty prop;
 
 	Xutf8TextListToTextProperty(xw.dpy, &p, 1, XUTF8StringStyle,
@@ -3641,18 +4069,21 @@
 }
 
 void
-xresettitle(void) {
+xresettitle(void)
+{
 	xsettitle(opt_title ? opt_title : "st");
 }
 
 void
-redraw(void) {
+redraw(void)
+{
 	tfulldirt();
 	draw();
 }
 
 void
-draw(void) {
+draw(void)
+{
 	drawregion(0, 0, term.col, term.row);
 	XCopyArea(xw.dpy, xw.buf, xw.win, dc.gc, 0, 0, xw.w,
 			xw.h, 0, 0);
@@ -3662,75 +4093,82 @@
 }
 
 void
-drawregion(int x1, int y1, int x2, int y2) {
+drawregion(int x1, int y1, int x2, int y2)
+{
 	int i, x, y, ox, numspecs;
 	Glyph base, new;
-	XftGlyphFontSpec* specs;
-	bool ena_sel = sel.ob.x != -1 && sel.alt == IS_SET(MODE_ALTSCREEN);
+	XftGlyphFontSpec *specs;
+	int ena_sel = sel.ob.x != -1 && sel.alt == IS_SET(MODE_ALTSCREEN);
 
-	if(!(xw.state & WIN_VISIBLE))
+	if (!(xw.state & WIN_VISIBLE))
 		return;
 
-	for(y = y1; y < y2; y++) {
-		if(!term.dirty[y])
+	for (y = y1; y < y2; y++) {
+		if (!term.dirty[y])
 			continue;
 
 		xtermclear(0, y, term.col, y);
 		term.dirty[y] = 0;
 
 		specs = term.specbuf;
-		numspecs = xmakeglyphfontspecs(specs, &term.line[y][x1], x2 - x1, x1, y);
+		numspecs = xmakeglyphfontspecs(specs, &TLINE(y)[x1], x2 - x1, x1, y);
 
 		i = ox = 0;
-		for(x = x1; x < x2 && i < numspecs; x++) {
-			new = term.line[y][x];
-			if(new.mode == ATTR_WDUMMY)
+		for (x = x1; x < x2 && i < numspecs; x++) {
+			new = TLINE(y)[x];
+			if (new.mode == ATTR_WDUMMY)
 				continue;
-			if(ena_sel && selected(x, y))
+			if (ena_sel && selected(x, y))
 				new.mode ^= ATTR_REVERSE;
-			if(i > 0 && ATTRCMP(base, new)) {
+			if (i > 0 && ATTRCMP(base, new)) {
 				xdrawglyphfontspecs(specs, base, i, ox, y);
 				specs += i;
 				numspecs -= i;
 				i = 0;
 			}
-			if(i == 0) {
+			if (i == 0) {
 				ox = x;
 				base = new;
 			}
 			i++;
 		}
-		if(i > 0)
+		if (i > 0)
 			xdrawglyphfontspecs(specs, base, i, ox, y);
 	}
-	xdrawcursor();
+	if (term.scr == 0)
+		xdrawcursor();
 }
 
 void
-expose(XEvent *ev) {
+expose(XEvent *ev)
+{
 	redraw();
 }
 
 void
-visibility(XEvent *ev) {
+visibility(XEvent *ev)
+{
 	XVisibilityEvent *e = &ev->xvisibility;
 
 	MODBIT(xw.state, e->state != VisibilityFullyObscured, WIN_VISIBLE);
 }
 
 void
-unmap(XEvent *ev) {
+unmap(XEvent *ev)
+{
 	xw.state &= ~WIN_VISIBLE;
 }
 
 void
-xsetpointermotion(int set) {
+xsetpointermotion(int set)
+{
 	MODBIT(xw.attrs.event_mask, set, PointerMotionMask);
 	XChangeWindowAttributes(xw.dpy, xw.win, CWEventMask, &xw.attrs);
 }
 
 void
-xseturgency(int add) {
+xseturgency(int add)
+{
 	XWMHints *h = XGetWMHints(xw.dpy, xw.win);
 
 	MODBIT(h->flags, add, XUrgencyHint);
@@ -3739,67 +4177,71 @@
 }
 
 void
-focus(XEvent *ev) {
+focus(XEvent *ev)
+{
 	XFocusChangeEvent *e = &ev->xfocus;
 
-	if(e->mode == NotifyGrab)
+	if (e->mode == NotifyGrab)
 		return;
 
-	if(ev->type == FocusIn) {
+	if (ev->type == FocusIn) {
 		XSetICFocus(xw.xic);
 		xw.state |= WIN_FOCUSED;
 		xseturgency(0);
-		if(IS_SET(MODE_FOCUS))
+		if (IS_SET(MODE_FOCUS))
 			ttywrite("\033[I", 3);
 	} else {
 		XUnsetICFocus(xw.xic);
 		xw.state &= ~WIN_FOCUSED;
-		if(IS_SET(MODE_FOCUS))
+		if (IS_SET(MODE_FOCUS))
 			ttywrite("\033[O", 3);
 	}
 }
 
-bool
-match(uint mask, uint state) {
+int
+match(uint mask, uint state)
+{
 	return mask == XK_ANY_MOD || mask == (state & ~ignoremod);
 }
 
 void
-numlock(const Arg *dummy) {
+numlock(const Arg *dummy)
+{
 	term.numlock ^= 1;
 }
 
 char*
-kmap(KeySym k, uint state) {
+kmap(KeySym k, uint state)
+{
 	Key *kp;
 	int i;
 
 	/* Check for mapped keys out of X11 function keys. */
-	for(i = 0; i < LEN(mappedkeys); i++) {
-		if(mappedkeys[i] == k)
+	for (i = 0; i < LEN(mappedkeys); i++) {
+		if (mappedkeys[i] == k)
 			break;
 	}
-	if(i == LEN(mappedkeys)) {
-		if((k & 0xFFFF) < 0xFD00)
+	if (i == LEN(mappedkeys)) {
+		if ((k & 0xFFFF) < 0xFD00)
 			return NULL;
 	}
 
-	for(kp = key; kp < key + LEN(key); kp++) {
-		if(kp->k != k)
+	for (kp = key; kp < key + LEN(key); kp++) {
+		if (kp->k != k)
 			continue;
 
-		if(!match(kp->mask, state))
+		if (!match(kp->mask, state))
 			continue;
 
-		if(IS_SET(MODE_APPKEYPAD) ? kp->appkey < 0 : kp->appkey > 0)
+		if (IS_SET(MODE_APPKEYPAD) ? kp->appkey < 0 : kp->appkey > 0)
 			continue;
-		if(term.numlock && kp->appkey == 2)
+		if (term.numlock && kp->appkey == 2)
 			continue;
 
-		if(IS_SET(MODE_APPCURSOR) ? kp->appcursor < 0 : kp->appcursor > 0)
+		if (IS_SET(MODE_APPCURSOR) ? kp->appcursor < 0 : kp->appcursor > 0)
 			continue;
 
-		if(IS_SET(MODE_CRLF) ? kp->crlf < 0 : kp->crlf > 0)
+		if (IS_SET(MODE_CRLF) ? kp->crlf < 0 : kp->crlf > 0)
 			continue;
 
 		return kp->s;
@@ -3809,7 +4251,8 @@
 }
 
 void
-kpress(XEvent *ev) {
+kpress(XEvent *ev)
+{
 	XKeyEvent *e = &ev->xkey;
 	KeySym ksym;
 	char buf[32], *customkey;
@@ -3818,30 +4261,30 @@
 	Status status;
 	Shortcut *bp;
 
-	if(IS_SET(MODE_KBDLOCK))
+	if (IS_SET(MODE_KBDLOCK))
 		return;
 
 	len = XmbLookupString(xw.xic, e, buf, sizeof buf, &ksym, &status);
 	/* 1. shortcuts */
-	for(bp = shortcuts; bp < shortcuts + LEN(shortcuts); bp++) {
-		if(ksym == bp->keysym && match(bp->mod, e->state)) {
+	for (bp = shortcuts; bp < shortcuts + LEN(shortcuts); bp++) {
+		if (ksym == bp->keysym && match(bp->mod, e->state)) {
 			bp->func(&(bp->arg));
 			return;
 		}
 	}
 
 	/* 2. custom keys from config.h */
-	if((customkey = kmap(ksym, e->state))) {
+	if ((customkey = kmap(ksym, e->state))) {
 		ttysend(customkey, strlen(customkey));
 		return;
 	}
 
 	/* 3. composed string from input method */
-	if(len == 0)
+	if (len == 0)
 		return;
-	if(len == 1 && e->state & Mod1Mask) {
-		if(IS_SET(MODE_8BIT)) {
-			if(*buf < 0177) {
+	if (len == 1 && e->state & Mod1Mask) {
+		if (IS_SET(MODE_8BIT)) {
+			if (*buf < 0177) {
 				c = *buf | 0x80;
 				len = utf8encode(c, buf);
 			}
@@ -3856,32 +4299,34 @@
 
 
 void
-cmessage(XEvent *e) {
+cmessage(XEvent *e)
+{
 	/*
 	 * See xembed specs
 	 *  http://standards.freedesktop.org/xembed-spec/xembed-spec-latest.html
 	 */
-	if(e->xclient.message_type == xw.xembed && e->xclient.format == 32) {
-		if(e->xclient.data.l[1] == XEMBED_FOCUS_IN) {
+	if (e->xclient.message_type == xw.xembed && e->xclient.format == 32) {
+		if (e->xclient.data.l[1] == XEMBED_FOCUS_IN) {
 			xw.state |= WIN_FOCUSED;
 			xseturgency(0);
-		} else if(e->xclient.data.l[1] == XEMBED_FOCUS_OUT) {
+		} else if (e->xclient.data.l[1] == XEMBED_FOCUS_OUT) {
 			xw.state &= ~WIN_FOCUSED;
 		}
-	} else if(e->xclient.data.l[0] == xw.wmdeletewin) {
+	} else if (e->xclient.data.l[0] == xw.wmdeletewin) {
 		/* Send SIGHUP to shell */
 		kill(pid, SIGHUP);
-		exit(EXIT_SUCCESS);
+		exit(0);
 	}
 }
 
 void
-cresize(int width, int height) {
+cresize(int width, int height)
+{
 	int col, row;
 
-	if(width != 0)
+	if (width != 0)
 		xw.w = width;
-	if(height != 0)
+	if (height != 0)
 		xw.h = height;
 
 	col = (xw.w - 2 * borderpx) / xw.cw;
@@ -3893,15 +4338,17 @@
 }
 
 void
-resize(XEvent *e) {
-	if(e->xconfigure.width == xw.w && e->xconfigure.height == xw.h)
+resize(XEvent *e)
+{
+	if (e->xconfigure.width == xw.w && e->xconfigure.height == xw.h)
 		return;
 
 	cresize(e->xconfigure.width, e->xconfigure.height);
 }
 
 void
-run(void) {
+run(void)
+{
 	XEvent ev;
 	int w = xw.w, h = xw.h;
 	fd_set rfd;
@@ -3913,17 +4360,17 @@
 	do {
 		XNextEvent(xw.dpy, &ev);
 		/*
-		 * XFilterEvent is required to be called after you using XOpenIM,
-		 * this is not unnecessary.It does not only filter the key event,
-		 * but some clientmessage for input method as well.
+		 * This XFilterEvent call is required because of XOpenIM. It
+		 * does filter out the key event and some client message for
+		 * the input method too.
 		 */
-		if(XFilterEvent(&ev, None))
+		if (XFilterEvent(&ev, None))
 			continue;
-		if(ev.type == ConfigureNotify) {
+		if (ev.type == ConfigureNotify) {
 			w = ev.xconfigure.width;
 			h = ev.xconfigure.height;
 		}
-	} while(ev.type != MapNotify);
+	} while (ev.type != MapNotify);
 
 	ttynew();
 	cresize(w, h);
@@ -3931,26 +4378,26 @@
 	clock_gettime(CLOCK_MONOTONIC, &last);
 	lastblink = last;
 
-	for(xev = actionfps;;) {
+	for (xev = actionfps;;) {
 		FD_ZERO(&rfd);
 		FD_SET(cmdfd, &rfd);
 		FD_SET(xfd, &rfd);
 
-		if(pselect(MAX(xfd, cmdfd)+1, &rfd, NULL, NULL, tv, NULL) < 0) {
-			if(errno == EINTR)
+		if (pselect(MAX(xfd, cmdfd)+1, &rfd, NULL, NULL, tv, NULL) < 0) {
+			if (errno == EINTR)
 				continue;
 			die("select failed: %s\n", strerror(errno));
 		}
-		if(FD_ISSET(cmdfd, &rfd)) {
+		if (FD_ISSET(cmdfd, &rfd)) {
 			ttyread();
-			if(blinktimeout) {
+			if (blinktimeout) {
 				blinkset = tattrset(ATTR_BLINK);
-				if(!blinkset)
+				if (!blinkset)
 					MODBIT(term.mode, 0, MODE_BLINK);
 			}
 		}
 
-		if(FD_ISSET(xfd, &rfd))
+		if (FD_ISSET(xfd, &rfd))
 			xev = actionfps;
 
 		clock_gettime(CLOCK_MONOTONIC, &now);
@@ -3959,35 +4406,35 @@
 		tv = &drawtimeout;
 
 		dodraw = 0;
-		if(blinktimeout && TIMEDIFF(now, lastblink) > blinktimeout) {
+		if (blinktimeout && TIMEDIFF(now, lastblink) > blinktimeout) {
 			tsetdirtattr(ATTR_BLINK);
 			term.mode ^= MODE_BLINK;
 			lastblink = now;
 			dodraw = 1;
 		}
 		deltatime = TIMEDIFF(now, last);
-		if(deltatime > 1000 / (xev ? xfps : actionfps)) {
+		if (deltatime > 1000 / (xev ? xfps : actionfps)) {
 			dodraw = 1;
 			last = now;
 		}
 
-		if(dodraw) {
-			while(XPending(xw.dpy)) {
+		if (dodraw) {
+			while (XPending(xw.dpy)) {
 				XNextEvent(xw.dpy, &ev);
-				if(XFilterEvent(&ev, None))
+				if (XFilterEvent(&ev, None))
 					continue;
-				if(handler[ev.type])
+				if (handler[ev.type])
 					(handler[ev.type])(&ev);
 			}
 
 			draw();
 			XFlush(xw.dpy);
 
-			if(xev && !FD_ISSET(xfd, &rfd))
+			if (xev && !FD_ISSET(xfd, &rfd))
 				xev--;
-			if(!FD_ISSET(cmdfd, &rfd) && !FD_ISSET(xfd, &rfd)) {
-				if(blinkset) {
-					if(TIMEDIFF(now, lastblink) \
+			if (!FD_ISSET(cmdfd, &rfd) && !FD_ISSET(xfd, &rfd)) {
+				if (blinkset) {
+					if (TIMEDIFF(now, lastblink) \
 							> blinktimeout) {
 						drawtimeout.tv_nsec = 1000;
 					} else {
@@ -4008,32 +4455,36 @@
 }
 
 void
-usage(void) {
+usage(void)
+{
 	die("%s " VERSION " (c) 2010-2015 st engineers\n"
 	"usage: st [-a] [-v] [-c class] [-f font] [-g geometry] [-o file]\n"
-	"          [-i] [-t title] [-w windowid] [-e command ...] [command ...]\n"
+	"          [-i] [-t title] [-T title] [-w windowid] [-e command ...]"
+	" [command ...]\n"
 	"       st [-a] [-v] [-c class] [-f font] [-g geometry] [-o file]\n"
-	"          [-i] [-t title] [-w windowid] [-l line] [stty_args ...]\n",
+	"          [-i] [-t title] [-T title] [-w windowid] -l line"
+	" [stty_args ...]\n",
 	argv0);
 }
 
 int
-main(int argc, char *argv[]) {
+main(int argc, char *argv[])
+{
 	uint cols = 80, rows = 24;
 
 	xw.l = xw.t = 0;
 	xw.isfixed = False;
-	xw.cursor = 0;
+	xw.cursor = cursorshape;
 
 	ARGBEGIN {
 	case 'a':
-		allowaltscreen = false;
+		allowaltscreen = 0;
 		break;
 	case 'c':
 		opt_class = EARGF(usage());
 		break;
 	case 'e':
-		if(argc > 0)
+		if (argc > 0)
 			--argc, ++argv;
 		goto run;
 	case 'f':
@@ -4044,7 +4495,7 @@
 				&xw.l, &xw.t, &cols, &rows);
 		break;
 	case 'i':
-		xw.isfixed = True;
+		xw.isfixed = 1;
 		break;
 	case 'o':
 		opt_io = EARGF(usage());
@@ -4053,6 +4504,7 @@
 		opt_line = EARGF(usage());
 		break;
 	case 't':
+	case 'T':
 		opt_title = EARGF(usage());
 		break;
 	case 'w':
@@ -4064,10 +4516,10 @@
 	} ARGEND;
 
 run:
-	if(argc > 0) {
+	if (argc > 0) {
 		/* eat all remaining arguments */
 		opt_cmd = argv;
-		if(!opt_title && !opt_line)
+		if (!opt_title && !opt_line)
 			opt_title = basename(xstrdup(argv[0]));
 	}
 	setlocale(LC_CTYPE, "");
diff -Naur ../pkg/st-0.6/st.info ./st.info
--- ../pkg/st-0.6/st.info	2015-07-07 16:26:44.000000000 -0400
+++ ./st.info	2015-10-30 10:13:47.494538050 -0400
@@ -1,5 +1,5 @@
 st| simpleterm,
-	acsc=``aaffggiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz{{||}}~~,
+	acsc=+C\,D-A.B0E``aaffgghFiGjjkkllmmnnooppqqrrssttuuvvwwxxyyzz{{||}}~~,
 	am,
 	bce,
 	bel=^G,
